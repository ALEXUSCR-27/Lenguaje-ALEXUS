/* The following code was generated by JFlex 1.4.2 on 25/05/23 02:31 AM */

package pry1_ci;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 25/05/23 02:31 AM from the specification file
 * <tt>T:/2023/COMPILADORES/PRYS/Lenguaje-ALEXUS/Netbeans/PRY1_CI/src/pry1_ci/lexer.jflex</tt>
 */
public class LexerAS implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CHAR = 4;
  public static final int CADENA = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\3\1\2\1\0\1\3\1\1\16\11\4\0\1\3\1\56"+
    "\1\65\1\60\1\40\2\0\1\64\1\46\1\47\1\6\1\45\1\55"+
    "\1\14\1\15\1\4\1\12\11\13\1\0\1\54\1\62\1\44\1\61"+
    "\1\0\1\7\5\10\1\10\11\10\1\42\1\10\1\43\1\10\1\10"+
    "\6\10\1\52\1\66\1\53\1\57\1\5\1\0\1\25\1\16\1\31"+
    "\1\35\1\33\1\24\1\30\1\32\1\21\1\10\1\36\1\20\1\10"+
    "\1\22\1\17\2\10\1\27\1\26\1\23\1\37\1\10\1\34\1\10"+
    "\1\41\1\10\1\50\1\0\1\51\1\63\41\11\2\0\4\10\4\0"+
    "\1\10\2\0\1\11\7\0\1\10\4\0\1\10\5\0\27\10\1\0"+
    "\37\10\1\0\u01ca\10\4\0\14\10\16\0\5\10\7\0\1\10\1\0"+
    "\1\10\21\0\160\11\5\10\1\0\2\10\2\0\4\10\10\0\1\10"+
    "\1\0\3\10\1\0\1\10\1\0\24\10\1\0\123\10\1\0\213\10"+
    "\1\0\5\11\2\0\236\10\11\0\46\10\2\0\1\10\7\0\47\10"+
    "\7\0\1\10\1\0\55\11\1\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\1\11\10\0\33\10\5\0\3\10\15\0\5\11\6\0\1\10"+
    "\4\0\13\11\5\0\53\10\37\11\4\0\2\10\1\11\143\10\1\0"+
    "\1\10\10\11\1\0\6\11\2\10\2\11\1\0\4\11\2\10\12\11"+
    "\3\10\2\0\1\10\17\0\1\11\1\10\1\11\36\10\33\11\2\0"+
    "\131\10\13\11\1\10\16\0\12\11\41\10\11\11\2\10\4\0\1\10"+
    "\5\0\26\10\4\11\1\10\11\11\1\10\3\11\1\10\5\11\22\0"+
    "\31\10\3\11\104\0\1\10\1\0\13\10\67\0\33\11\1\0\4\11"+
    "\66\10\3\11\1\10\22\11\1\10\7\11\12\10\2\11\2\0\12\11"+
    "\1\0\7\10\1\0\7\10\1\0\3\11\1\0\10\10\2\0\2\10"+
    "\2\0\26\10\1\0\7\10\1\0\1\10\3\0\4\10\2\0\1\11"+
    "\1\10\7\11\2\0\2\11\2\0\3\11\1\10\10\0\1\11\4\0"+
    "\2\10\1\0\3\10\2\11\2\0\12\11\4\10\7\0\1\10\5\0"+
    "\3\11\1\0\6\10\4\0\2\10\2\0\26\10\1\0\7\10\1\0"+
    "\2\10\1\0\2\10\1\0\2\10\2\0\1\11\1\0\5\11\4\0"+
    "\2\11\2\0\3\11\3\0\1\11\7\0\4\10\1\0\1\10\7\0"+
    "\14\11\3\10\1\11\13\0\3\11\1\0\11\10\1\0\3\10\1\0"+
    "\26\10\1\0\7\10\1\0\2\10\1\0\5\10\2\0\1\11\1\10"+
    "\10\11\1\0\3\11\1\0\3\11\2\0\1\10\17\0\2\10\2\11"+
    "\2\0\12\11\1\0\1\10\17\0\3\11\1\0\10\10\2\0\2\10"+
    "\2\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10\2\0\1\11"+
    "\1\10\7\11\2\0\2\11\2\0\3\11\10\0\2\11\4\0\2\10"+
    "\1\0\3\10\2\11\2\0\12\11\1\0\1\10\20\0\1\11\1\10"+
    "\1\0\6\10\3\0\3\10\1\0\4\10\3\0\2\10\1\0\1\10"+
    "\1\0\2\10\3\0\2\10\3\0\3\10\3\0\14\10\4\0\5\11"+
    "\3\0\3\11\1\0\4\11\2\0\1\10\6\0\1\11\16\0\12\11"+
    "\11\0\1\10\7\0\3\11\1\0\10\10\1\0\3\10\1\0\27\10"+
    "\1\0\12\10\1\0\5\10\3\0\1\10\7\11\1\0\3\11\1\0"+
    "\4\11\7\0\2\11\1\0\2\10\6\0\2\10\2\11\2\0\12\11"+
    "\22\0\2\11\1\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10"+
    "\1\0\5\10\2\0\1\11\1\10\7\11\1\0\3\11\1\0\4\11"+
    "\7\0\2\11\7\0\1\10\1\0\2\10\2\11\2\0\12\11\1\0"+
    "\2\10\17\0\2\11\1\0\10\10\1\0\3\10\1\0\51\10\2\0"+
    "\1\10\7\11\1\0\3\11\1\0\4\11\1\10\10\0\1\11\10\0"+
    "\2\10\2\11\2\0\12\11\12\0\6\10\2\0\2\11\1\0\22\10"+
    "\3\0\30\10\1\0\11\10\1\0\1\10\2\0\7\10\3\0\1\11"+
    "\4\0\6\11\1\0\1\11\1\0\10\11\22\0\2\11\15\0\60\10"+
    "\1\11\2\10\7\11\4\0\10\10\10\11\1\0\12\11\47\0\2\10"+
    "\1\0\1\10\2\0\2\10\1\0\1\10\2\0\1\10\6\0\4\10"+
    "\1\0\7\10\1\0\3\10\1\0\1\10\1\0\1\10\2\0\2\10"+
    "\1\0\4\10\1\11\2\10\6\11\1\0\2\11\1\10\2\0\5\10"+
    "\1\0\1\10\1\0\6\11\2\0\12\11\2\0\4\10\40\0\1\10"+
    "\27\0\2\11\6\0\12\11\13\0\1\11\1\0\1\11\1\0\1\11"+
    "\4\0\2\11\10\10\1\0\44\10\4\0\24\11\1\0\2\11\5\10"+
    "\13\11\1\0\44\11\11\0\1\11\71\0\53\10\24\11\1\10\12\11"+
    "\6\0\6\10\4\11\4\10\3\11\1\10\3\11\2\10\7\11\3\10"+
    "\4\11\15\10\14\11\1\10\17\11\2\0\46\10\1\0\1\10\5\0"+
    "\1\10\2\0\53\10\1\0\u014d\10\1\0\4\10\2\0\7\10\1\0"+
    "\1\10\1\0\4\10\2\0\51\10\1\0\4\10\2\0\41\10\1\0"+
    "\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\17\10\1\0"+
    "\71\10\1\0\4\10\2\0\103\10\2\0\3\11\40\0\20\10\20\0"+
    "\125\10\14\0\u026c\10\2\0\21\10\1\0\32\10\5\0\113\10\3\0"+
    "\3\10\17\0\15\10\1\0\4\10\3\11\13\0\22\10\3\11\13\0"+
    "\22\10\2\11\14\0\15\10\1\0\3\10\1\0\2\11\14\0\64\10"+
    "\40\11\3\0\1\10\3\0\2\10\1\11\2\0\12\11\41\0\3\11"+
    "\2\0\12\11\6\0\130\10\10\0\51\10\1\11\1\10\5\0\106\10"+
    "\12\0\35\10\3\0\14\11\4\0\14\11\12\0\12\11\36\10\2\0"+
    "\5\10\13\0\54\10\4\0\21\11\7\10\2\11\6\0\12\11\46\0"+
    "\27\10\5\11\4\0\65\10\12\11\1\0\35\11\2\0\13\11\6\0"+
    "\12\11\15\0\1\10\130\0\5\11\57\10\21\11\7\10\4\0\12\11"+
    "\21\0\11\11\14\0\3\11\36\10\15\11\2\10\12\11\54\10\16\11"+
    "\14\0\44\10\24\11\10\0\12\11\3\0\3\10\12\11\44\10\122\0"+
    "\3\11\1\0\25\11\4\10\1\11\4\10\3\11\2\10\11\0\300\10"+
    "\47\11\25\0\4\11\u0116\10\2\0\6\10\2\0\46\10\2\0\6\10"+
    "\2\0\10\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0\37\10"+
    "\2\0\65\10\1\0\7\10\1\0\1\10\3\0\3\10\1\0\7\10"+
    "\3\0\4\10\2\0\6\10\4\0\15\10\5\0\3\10\1\0\7\10"+
    "\16\0\5\11\32\0\5\11\20\0\2\10\23\0\1\10\13\0\5\11"+
    "\5\0\6\11\1\0\1\10\15\0\1\10\20\0\15\10\3\0\33\10"+
    "\25\0\15\11\4\0\1\11\3\0\14\11\21\0\1\10\4\0\1\10"+
    "\2\0\12\10\1\0\1\10\3\0\5\10\6\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\4\10\1\0\13\10\2\0\4\10\5\0\5\10"+
    "\4\0\1\10\21\0\51\10\u0a77\0\57\10\1\0\57\10\1\0\205\10"+
    "\6\0\4\10\3\11\2\10\14\0\46\10\1\0\1\10\5\0\1\10"+
    "\2\0\70\10\7\0\1\10\17\0\1\11\27\10\11\0\7\10\1\0"+
    "\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0"+
    "\7\10\1\0\7\10\1\0\40\11\57\0\1\10\u01d5\0\3\10\31\0"+
    "\11\10\6\11\1\0\5\10\2\0\5\10\4\0\126\10\2\0\2\11"+
    "\2\0\3\10\1\0\132\10\1\0\4\10\5\0\51\10\3\0\136\10"+
    "\21\0\33\10\65\0\20\10\u0200\0\u19b6\10\112\0\u51cd\10\63\0\u048d\10"+
    "\103\0\56\10\2\0\u010d\10\3\0\20\10\12\11\2\10\24\0\57\10"+
    "\1\11\4\0\12\11\1\0\31\10\7\0\1\11\120\10\2\11\45\0"+
    "\11\10\2\0\147\10\2\0\4\10\1\0\4\10\14\0\13\10\115\0"+
    "\12\10\1\11\3\10\1\11\4\10\1\11\27\10\5\11\20\0\1\10"+
    "\7\0\64\10\14\0\2\11\62\10\21\11\13\0\12\11\6\0\22\11"+
    "\6\10\3\0\1\10\4\0\12\11\34\10\10\11\2\0\27\10\15\11"+
    "\14\0\35\10\3\0\4\11\57\10\16\11\16\0\1\10\12\11\46\0"+
    "\51\10\16\11\11\0\3\10\1\11\10\10\2\11\2\0\12\11\6\0"+
    "\27\10\3\0\1\10\1\11\4\0\60\10\1\11\1\10\3\11\2\10"+
    "\2\11\5\10\2\11\1\10\1\11\1\10\30\0\3\10\2\0\13\10"+
    "\5\11\2\0\3\10\2\11\12\0\6\10\2\0\6\10\2\0\6\10"+
    "\11\0\7\10\1\0\7\10\221\0\43\10\10\11\1\0\2\11\2\0"+
    "\12\11\6\0\u2ba4\10\14\0\27\10\4\0\61\10\u2104\0\u016e\10\2\0"+
    "\152\10\46\0\7\10\14\0\5\10\5\0\1\10\1\11\12\10\1\0"+
    "\15\10\1\0\5\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\154\10\41\0\u016b\10\22\0\100\10\2\0\66\10\50\0\15\10\3\0"+
    "\20\11\20\0\7\11\14\0\2\10\30\0\3\10\31\0\1\10\6\0"+
    "\5\10\1\0\207\10\2\0\1\11\4\0\1\10\13\0\12\11\7\0"+
    "\32\10\4\0\1\10\1\0\32\10\13\0\131\10\3\0\6\10\2\0"+
    "\6\10\2\0\6\10\2\0\3\10\3\0\2\10\3\0\2\10\22\0"+
    "\3\11\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\11\4\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\2\35\1\36"+
    "\1\37\1\1\2\40\1\1\2\0\1\41\1\0\2\6"+
    "\2\0\1\42\3\4\1\43\10\4\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\5\52\1\57\2\52\2\0\1\60\2\4\1\61"+
    "\1\62\10\4\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\0\1\73\6\4\1\74\1\75\1\76"+
    "\1\4\1\77\1\100\4\4\1\101\1\102\2\4\1\103"+
    "\1\4\1\104\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\245\0\u0113\0\u014a"+
    "\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302"+
    "\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u014a\0\u0483"+
    "\0\u04ba\0\245\0\245\0\245\0\245\0\245\0\245\0\245"+
    "\0\245\0\u04f1\0\245\0\245\0\u0528\0\u055f\0\245\0\245"+
    "\0\245\0\u0596\0\u05cd\0\245\0\245\0\u0604\0\u063b\0\u0672"+
    "\0\245\0\u06a9\0\u06e0\0\u0717\0\245\0\u01b8\0\u074e\0\245"+
    "\0\u0785\0\u01ef\0\245\0\u07bc\0\u07f3\0\u082a\0\u014a\0\u0861"+
    "\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u014a"+
    "\0\245\0\245\0\245\0\245\0\245\0\245\0\245\0\245"+
    "\0\245\0\245\0\245\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5"+
    "\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0785\0\u0c3f\0\u0c76"+
    "\0\u014a\0\u014a\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0"+
    "\0\u0df7\0\u0e2e\0\245\0\245\0\245\0\245\0\245\0\245"+
    "\0\245\0\245\0\u0e65\0\u014a\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41"+
    "\0\u0f78\0\u0faf\0\u014a\0\u014a\0\u014a\0\u0fe6\0\u014a\0\u014a"+
    "\0\u101d\0\u1054\0\u108b\0\u10c2\0\u014a\0\u014a\0\u10f9\0\u1130"+
    "\0\u014a\0\u1167\0\u014a\0\u014a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\12\1\10"+
    "\1\4\1\13\1\14\1\15\1\4\1\16\2\10\1\17"+
    "\2\10\1\20\1\10\1\21\1\22\1\10\1\23\1\10"+
    "\1\24\1\25\1\26\2\10\1\27\3\10\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\4\1\52\1\53\1\54\62\52\1\55\1\56\1\57"+
    "\1\60\1\61\63\57\1\62\71\0\1\6\71\0\1\63"+
    "\1\64\65\0\1\10\2\0\4\10\2\0\26\10\31\0"+
    "\1\65\60\0\1\66\1\67\1\70\64\66\15\0\1\71"+
    "\63\0\2\14\1\0\1\71\63\0\1\72\1\14\1\73"+
    "\57\0\1\10\2\0\4\10\2\0\1\10\1\74\7\10"+
    "\1\75\14\10\30\0\1\10\2\0\4\10\2\0\4\10"+
    "\1\76\1\10\1\77\17\10\30\0\1\10\2\0\4\10"+
    "\2\0\1\10\1\100\1\101\23\10\30\0\1\10\2\0"+
    "\4\10\2\0\5\10\1\102\15\10\1\103\2\10\30\0"+
    "\1\10\2\0\4\10\2\0\15\10\1\104\10\10\30\0"+
    "\1\10\2\0\4\10\2\0\14\10\1\105\11\10\30\0"+
    "\1\10\2\0\4\10\2\0\2\10\1\106\23\10\30\0"+
    "\1\10\2\0\4\10\2\0\14\10\1\107\11\10\30\0"+
    "\1\10\2\0\4\10\2\0\1\10\1\110\24\10\67\0"+
    "\1\111\67\0\1\112\65\0\1\113\66\0\1\114\66\0"+
    "\1\115\22\0\1\52\2\0\62\52\4\0\1\54\64\0"+
    "\2\116\1\0\17\116\1\117\1\120\3\116\1\121\35\116"+
    "\1\122\1\116\64\0\1\123\4\0\1\61\64\0\2\116"+
    "\1\0\13\116\1\124\3\116\1\125\1\126\1\127\2\116"+
    "\1\130\34\116\1\131\1\132\1\133\6\134\1\0\60\134"+
    "\6\0\1\135\62\0\1\70\76\0\2\136\60\0\1\10"+
    "\2\0\4\10\2\0\1\10\1\137\24\10\30\0\1\10"+
    "\2\0\4\10\2\0\15\10\1\140\10\10\30\0\1\10"+
    "\2\0\4\10\2\0\5\10\1\141\20\10\30\0\1\10"+
    "\2\0\4\10\2\0\11\10\1\142\14\10\30\0\1\10"+
    "\2\0\4\10\2\0\1\10\1\143\24\10\30\0\1\10"+
    "\2\0\4\10\2\0\11\10\1\144\14\10\30\0\1\10"+
    "\2\0\4\10\2\0\10\10\1\145\15\10\30\0\1\10"+
    "\2\0\4\10\2\0\5\10\1\146\20\10\30\0\1\10"+
    "\2\0\4\10\2\0\7\10\1\147\16\10\30\0\1\10"+
    "\2\0\4\10\2\0\3\10\1\150\4\10\1\151\15\10"+
    "\30\0\1\10\2\0\4\10\2\0\3\10\1\152\22\10"+
    "\107\0\1\153\66\0\1\154\66\0\1\155\66\0\1\156"+
    "\66\0\1\157\66\0\1\160\66\0\1\161\66\0\1\162"+
    "\2\0\5\134\1\163\61\134\4\0\1\70\1\0\1\135"+
    "\65\0\1\10\2\0\4\10\2\0\2\10\1\164\23\10"+
    "\30\0\1\10\2\0\4\10\2\0\7\10\1\165\16\10"+
    "\30\0\1\10\2\0\4\10\2\0\7\10\1\166\16\10"+
    "\30\0\1\10\2\0\4\10\2\0\3\10\1\167\22\10"+
    "\30\0\1\10\2\0\4\10\2\0\24\10\1\170\1\171"+
    "\30\0\1\10\2\0\4\10\2\0\21\10\1\172\4\10"+
    "\30\0\1\10\2\0\4\10\2\0\11\10\1\173\14\10"+
    "\30\0\1\10\2\0\4\10\2\0\6\10\1\174\17\10"+
    "\30\0\1\10\2\0\4\10\2\0\15\10\1\175\10\10"+
    "\30\0\1\10\2\0\4\10\2\0\2\10\1\176\23\10"+
    "\23\0\4\134\1\70\1\163\61\134\5\0\1\10\2\0"+
    "\4\10\2\0\20\10\1\177\5\10\30\0\1\10\2\0"+
    "\4\10\2\0\5\10\1\200\20\10\30\0\1\10\2\0"+
    "\4\10\2\0\4\10\1\201\21\10\30\0\1\10\2\0"+
    "\4\10\2\0\11\10\1\202\14\10\30\0\1\10\2\0"+
    "\4\10\2\0\15\10\1\203\10\10\30\0\1\10\2\0"+
    "\4\10\2\0\11\10\1\204\14\10\30\0\1\10\2\0"+
    "\4\10\2\0\15\10\1\205\10\10\30\0\1\10\2\0"+
    "\4\10\2\0\12\10\1\206\13\10\30\0\1\10\2\0"+
    "\4\10\2\0\3\10\1\207\22\10\30\0\1\10\2\0"+
    "\4\10\2\0\7\10\1\210\16\10\30\0\1\10\2\0"+
    "\4\10\2\0\4\10\1\211\21\10\30\0\1\10\2\0"+
    "\4\10\2\0\4\10\1\212\21\10\30\0\1\10\2\0"+
    "\4\10\2\0\17\10\1\213\6\10\30\0\1\10\2\0"+
    "\4\10\2\0\5\10\1\214\20\10\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4510];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\23\1\10\11\1\1\2\11"+
    "\2\1\3\11\2\1\2\11\3\1\1\11\1\1\2\0"+
    "\1\11\1\0\1\1\1\11\2\0\1\11\15\1\13\11"+
    "\10\1\2\0\15\1\10\11\1\0\31\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    int line = 1;
    int column = 1;
    String msgErr = "";
    StringBuffer string = new StringBuffer();

    public Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    public Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }

    public int getYYLine() {
        return yyline+1;
    }

    public int getYYColumn() {
        return yycolumn+1;
    }

    public String getMsgErr() {
        return msgErr;
    }

    public void SetMsgErr() {
        msgErr = "";
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerAS(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexerAS(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2264) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 54: 
          { yybegin(YYINITIAL);
						 return symbol(sym.L_CHAR, '\f');
          }
        case 70: break;
        case 25: 
          { return symbol(sym.MODULO);
          }
        case 71: break;
        case 57: 
          { yybegin(YYINITIAL);
						 return symbol(sym.L_CHAR, '\"');
          }
        case 72: break;
        case 15: 
          { return symbol(sym.LLAVESCORCHETECIERRA);
          }
        case 73: break;
        case 44: 
          { string.append('\t');
          }
        case 74: break;
        case 56: 
          { yybegin(YYINITIAL);
						 return symbol(sym.L_CHAR, '\'');
          }
        case 75: break;
        case 49: 
          { return symbol(sym.INT);
          }
        case 76: break;
        case 40: 
          { return symbol(sym.GREATER_THAN_OR_EQ);
          }
        case 77: break;
        case 16: 
          { return symbol(sym.LLAVESCUADABRE);
          }
        case 78: break;
        case 1: 
          { msgErr = "[Error lexico] Caracter Ilegal: "+yytext()+"\" en la linea "+(yyline+1)+", columna "+(yycolumn+1);
        System.err.println(msgErr);
          }
        case 79: break;
        case 68: 
          { return symbol(sym.SYS_READ);
          }
        case 80: break;
        case 61: 
          { return symbol(sym.ELIF);
          }
        case 81: break;
        case 23: 
          { return symbol(sym.GREATER_THAN);
          }
        case 82: break;
        case 34: 
          { return symbol(sym.MINUSMINUS);
          }
        case 83: break;
        case 12: 
          { return symbol(sym.PARENTESISABRE);
          }
        case 84: break;
        case 31: 
          { string.append('\\');
          }
        case 85: break;
        case 67: 
          { return symbol(sym.RETURN);
          }
        case 86: break;
        case 45: 
          { string.append('\r');
          }
        case 87: break;
        case 52: 
          { yybegin(YYINITIAL);
						 return symbol(sym.L_CHAR, '\n');
          }
        case 88: break;
        case 11: 
          { return symbol(sym.PLUS);
          }
        case 89: break;
        case 21: 
          { return symbol(sym.CONJUNCION);
          }
        case 90: break;
        case 14: 
          { return symbol(sym.LLAVESCORCHETEABRE);
          }
        case 91: break;
        case 69: 
          { return symbol(sym.SYS_PRINT);
          }
        case 92: break;
        case 29: 
          { msgErr = "[Error lexico] String incompleto:" + yytext() + "\" en la linea "+(yyline+1)+", columna "+(yycolumn+1);
    System.err.println(msgErr);
          }
        case 93: break;
        case 20: 
          { return symbol(sym.NEGACION);
          }
        case 94: break;
        case 4: 
          { return symbol(sym.Identificador, yytext());
          }
        case 95: break;
        case 51: 
          { yybegin(YYINITIAL);
						 return symbol(sym.L_CHAR, '\b');
          }
        case 96: break;
        case 41: 
          { return symbol(sym.LESS_THAN_OR_EQ);
          }
        case 97: break;
        case 2: 
          { /*ignore*/
          }
        case 98: break;
        case 6: 
          { return symbol(sym.COMENTARIO);
          }
        case 99: break;
        case 36: 
          { return symbol(sym.DO);
          }
        case 100: break;
        case 5: 
          { return symbol(sym.TIMES);
          }
        case 101: break;
        case 62: 
          { return symbol(sym.ELSE);
          }
        case 102: break;
        case 46: 
          { string.append('\"');
          }
        case 103: break;
        case 13: 
          { return symbol(sym.PARENTESISCIERRA);
          }
        case 104: break;
        case 48: 
          { return symbol(sym.L_FLOTANTE, Float.valueOf(yytext()));
          }
        case 105: break;
        case 9: 
          { return symbol(sym.FIN_EXPRESION);
          }
        case 106: break;
        case 65: 
          { return symbol(sym.WHILE);
          }
        case 107: break;
        case 63: 
          { return symbol(sym.BREAK);
          }
        case 108: break;
        case 35: 
          { return symbol(sym.IF);
          }
        case 109: break;
        case 3: 
          { return symbol(sym.DIVI);
          }
        case 110: break;
        case 47: 
          { yybegin(YYINITIAL);
						 return symbol(sym.L_CHAR, yytext().charAt(0));
          }
        case 111: break;
        case 39: 
          { return symbol(sym.NOT_EQ);
          }
        case 112: break;
        case 19: 
          { return symbol(sym.COMA);
          }
        case 113: break;
        case 10: 
          { return symbol(sym.EQ);
          }
        case 114: break;
        case 60: 
          { return symbol(sym.CHAR);
          }
        case 115: break;
        case 59: 
          { return symbol(sym.BOOL);
          }
        case 116: break;
        case 50: 
          { return symbol(sym.FOR);
          }
        case 117: break;
        case 42: 
          { msgErr = "[Error lexico] Secuencia de escape ilegal:" + yytext() + "\" en la linea "+(yyline+1)+", columna "+(yycolumn+1);
    System.err.println(msgErr);
          }
        case 118: break;
        case 64: 
          { return symbol(sym.FLOAT);
          }
        case 119: break;
        case 43: 
          { string.append('\n');
          }
        case 120: break;
        case 38: 
          { return symbol(sym.PLUSPLUS);
          }
        case 121: break;
        case 32: 
          { msgErr = "[Error lexico] Literal caracter incompleto:" + yytext() + "\" en la linea "+(yyline+1)+", columna "+(yycolumn+1);
    System.err.println(msgErr);
          }
        case 122: break;
        case 18: 
          { return symbol(sym.SEMI);
          }
        case 123: break;
        case 22: 
          { return symbol(sym.DISYUNCION);
          }
        case 124: break;
        case 28: 
          { string.append(yytext());
          }
        case 125: break;
        case 8: 
          { return symbol(sym.MINUS);
          }
        case 126: break;
        case 53: 
          { yybegin(YYINITIAL);
						 return symbol(sym.L_CHAR, '\t');
          }
        case 127: break;
        case 30: 
          { yybegin(YYINITIAL); return symbol(sym.STRING_LITERAL, string.toString());
          }
        case 128: break;
        case 7: 
          { return symbol(sym.L_ENTERO, Integer.valueOf(yytext()));
          }
        case 129: break;
        case 66: 
          { return symbol(sym.STRING);
          }
        case 130: break;
        case 26: 
          { yybegin(CHAR);
          }
        case 131: break;
        case 27: 
          { yybegin(CADENA); string.setLength(0);
          }
        case 132: break;
        case 24: 
          { return symbol(sym.LESS_THAN);
          }
        case 133: break;
        case 58: 
          { yybegin(YYINITIAL);
						 return symbol(sym.L_CHAR, '\\');
          }
        case 134: break;
        case 33: 
          { return symbol(sym.POWER);
          }
        case 135: break;
        case 17: 
          { return symbol(sym.LLAVESCUADCIERRA);
          }
        case 136: break;
        case 55: 
          { yybegin(YYINITIAL);
						 return symbol(sym.L_CHAR, '\r');
          }
        case 137: break;
        case 37: 
          { return symbol(sym.EQEQ);
          }
        case 138: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
