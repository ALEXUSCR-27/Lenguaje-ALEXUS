
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pry1_ci;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\004\000\002\004\004\000" +
    "\002\004\003\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\004\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\014\004\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\050" +
    "\005\000\002\053\005\000\002\053\005\000\002\052\006" +
    "\000\002\052\006\000\002\054\006\000\002\054\006\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\010\005\000\002\010" +
    "\006\000\002\007\011\000\002\007\012\000\002\007\012" +
    "\000\002\007\012\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\005\000\002\012\004\000\002" +
    "\012\006\000\002\017\006\000\002\017\006\000\002\020" +
    "\006\000\002\020\006\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\022\011\000\002\022\012\000\002" +
    "\022\012\000\002\023\012\000\002\024\007\000\002\025" +
    "\011\000\002\026\012\000\002\006\003\000\002\006\003" +
    "\000\002\027\011\000\002\027\011\000\002\027\011\000" +
    "\002\031\004\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\036\005\000\002\036\005" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\045\003\000\002\045\003\000\002" +
    "\037\004\000\002\041\003\000\002\035\004\000\002\035" +
    "\004\000\002\044\003\000\002\044\003\000\002\034\005" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\040\005\000\002\046\003\000\002\046\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\051\003\000\002\051" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\010\016\007\020\010\021\012\001\002\000" +
    "\004\002\000\001\002\000\010\016\007\020\010\021\012" +
    "\001\002\000\004\065\327\001\002\000\004\065\uff93\001" +
    "\002\000\004\065\uff92\001\002\000\004\002\326\001\002" +
    "\000\006\004\013\065\uff94\001\002\000\004\050\014\001" +
    "\002\000\004\051\015\001\002\000\004\052\016\001\002" +
    "\000\054\006\050\011\064\012\077\013\037\015\051\016" +
    "\045\017\024\020\070\021\033\022\073\023\054\024\053" +
    "\025\041\032\036\037\055\060\043\061\035\062\025\063" +
    "\042\064\021\065\071\001\002\000\004\005\uffdd\001\002" +
    "\000\004\030\323\001\002\000\046\005\uff85\026\uff85\027" +
    "\uff85\031\uff85\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85" +
    "\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046" +
    "\uff85\047\uff85\051\uff85\001\002\000\004\005\uffda\001\002" +
    "\000\004\005\uffdc\001\002\000\006\055\uff8a\065\uff8e\001" +
    "\002\000\046\005\uff87\026\uff87\027\uff87\031\uff87\032\uff87" +
    "\033\uff87\034\uff87\035\uff87\036\uff87\040\uff87\041\uff87\042" +
    "\uff87\043\uff87\044\uff87\045\uff87\046\uff87\047\uff87\051\uff87" +
    "\001\002\000\004\065\322\001\002\000\004\005\uffdb\001" +
    "\002\000\042\026\127\027\310\031\307\032\316\033\312" +
    "\034\131\035\320\036\314\040\265\041\266\042\313\043" +
    "\315\044\126\045\124\046\132\047\123\001\002\000\056" +
    "\006\uffc5\011\uffc5\012\uffc5\013\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\032\uffc5\037\uffc5\053\uffc5\060\uffc5\061\uffc5\062\uffc5\063" +
    "\uffc5\064\uffc5\065\uffc5\001\002\000\046\005\uff97\026\uff97" +
    "\027\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036" +
    "\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97" +
    "\046\uff97\047\uff97\051\uff97\001\002\000\006\055\uff8b\065" +
    "\uff91\001\002\000\004\053\306\001\002\000\046\005\uff88" +
    "\026\uff88\027\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035" +
    "\uff88\036\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88" +
    "\045\uff88\046\uff88\047\uff88\051\uff88\001\002\000\016\060" +
    "\043\061\035\062\025\063\042\064\021\065\120\001\002" +
    "\000\004\050\260\001\002\000\004\005\257\001\002\000" +
    "\004\050\252\001\002\000\046\005\uff86\026\uff86\027\uff86" +
    "\031\uff86\032\uff86\033\uff86\034\uff86\035\uff86\036\uff86\040" +
    "\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86" +
    "\047\uff86\051\uff86\001\002\000\046\005\uff89\026\uff89\027" +
    "\uff89\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89" +
    "\040\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89\046" +
    "\uff89\047\uff89\051\uff89\001\002\000\056\006\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\032\uffc7\037\uffc7" +
    "\053\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065" +
    "\uffc7\001\002\000\004\065\uff90\001\002\000\016\060\043" +
    "\061\035\062\025\063\042\064\021\065\120\001\002\000" +
    "\004\005\250\001\002\000\004\050\237\001\002\000\022" +
    "\032\036\037\055\060\043\061\035\062\025\063\042\064" +
    "\021\065\230\001\002\000\056\006\050\011\064\012\077" +
    "\013\037\015\051\016\045\017\024\020\070\021\033\022" +
    "\073\023\054\024\053\025\041\032\036\037\055\053\ufffc" +
    "\060\043\061\035\062\025\063\042\064\021\065\071\001" +
    "\002\000\004\050\221\001\002\000\004\053\ufff8\001\002" +
    "\000\016\060\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065" +
    "\uffa6\001\002\000\004\005\220\001\002\000\056\006\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\015\uffc8\016\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\032\uffc8" +
    "\037\uffc8\053\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064" +
    "\uffc8\065\uffc8\001\002\000\044\005\217\026\uff95\027\uff95" +
    "\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\040" +
    "\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95" +
    "\047\uff95\001\002\000\056\006\uffc6\011\uffc6\012\uffc6\013" +
    "\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\032\uffc6\037\uffc6\053\uffc6\060" +
    "\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\001\002" +
    "\000\062\006\uffc9\007\204\010\205\011\uffc9\012\uffc9\013" +
    "\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\032\uffc9\037\uffc9\053\uffc9\060" +
    "\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\001\002" +
    "\000\004\005\203\001\002\000\004\050\175\001\002\000" +
    "\056\006\uffc4\011\uffc4\012\uffc4\013\uffc4\015\uffc4\016\uffc4" +
    "\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\032\uffc4\037\uffc4\053\uffc4\060\uffc4\061\uffc4\062\uffc4" +
    "\063\uffc4\064\uffc4\065\uffc4\001\002\000\004\005\174\001" +
    "\002\000\004\055\172\001\002\000\004\065\uff8f\001\002" +
    "\000\050\026\uff96\027\uff96\030\160\031\uff96\032\uff96\033" +
    "\uff96\034\uff96\035\uff96\036\uff96\040\uff96\041\uff96\042\uff96" +
    "\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\136\055" +
    "\161\001\002\000\056\006\050\011\064\012\077\013\037" +
    "\015\051\016\045\017\024\020\070\021\033\022\073\023" +
    "\054\024\053\025\041\032\036\037\055\053\ufffd\060\043" +
    "\061\035\062\025\063\042\064\021\065\071\001\002\000" +
    "\004\065\uff8d\001\002\000\006\005\152\030\151\001\002" +
    "\000\004\053\ufffb\001\002\000\004\005\150\001\002\000" +
    "\004\052\104\001\002\000\004\005\uffde\001\002\000\004" +
    "\005\103\001\002\000\004\065\uff8c\001\002\000\056\006" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\032" +
    "\ufff4\037\ufff4\053\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4" +
    "\064\ufff4\065\ufff4\001\002\000\056\006\050\011\064\012" +
    "\077\013\037\014\107\015\051\016\045\017\024\020\070" +
    "\021\033\022\073\023\054\024\053\025\041\032\036\037" +
    "\055\060\043\061\035\062\025\063\042\064\021\065\071" +
    "\001\002\000\004\053\uffbc\001\002\000\004\053\uffbb\001" +
    "\002\000\004\005\147\001\002\000\004\053\111\001\002" +
    "\000\004\011\112\001\002\000\004\050\113\001\002\000" +
    "\020\037\055\060\043\061\035\062\117\063\042\064\021" +
    "\065\120\001\002\000\026\005\uff95\026\uff95\034\uff95\040" +
    "\uff95\041\uff95\044\uff95\045\uff95\046\uff95\047\uff95\051\uff95" +
    "\001\002\000\004\051\uffb0\001\002\000\004\051\uffb1\001" +
    "\002\000\020\026\uff87\034\uff87\044\uff87\045\uff87\046\uff87" +
    "\047\uff87\051\uffb2\001\002\000\030\005\uff96\026\uff96\034" +
    "\uff96\040\uff96\041\uff96\044\uff96\045\uff96\046\uff96\047\uff96" +
    "\050\136\051\uff96\001\002\000\004\051\135\001\002\000" +
    "\016\026\127\034\131\044\126\045\124\046\132\047\123" +
    "\001\002\000\016\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064" +
    "\uffaa\065\uffaa\001\002\000\016\060\uffac\061\uffac\062\uffac" +
    "\063\uffac\064\uffac\065\uffac\001\002\000\016\060\043\061" +
    "\035\062\025\063\042\064\021\065\120\001\002\000\016" +
    "\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad\001" +
    "\002\000\016\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9" +
    "\065\uffa9\001\002\000\016\060\043\061\035\062\025\063" +
    "\042\064\021\065\120\001\002\000\016\060\uffa8\061\uffa8" +
    "\062\uffa8\063\uffa8\064\uffa8\065\uffa8\001\002\000\016\060" +
    "\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065\uffab\001\002" +
    "\000\006\005\uffae\051\uffae\001\002\000\006\005\uffaf\051" +
    "\uffaf\001\002\000\056\006\uffbd\011\uffbd\012\uffbd\013\uffbd" +
    "\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\032\uffbd\037\uffbd\053\uffbd\060\uffbd" +
    "\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\001\002\000" +
    "\020\051\137\060\043\061\035\062\025\063\042\064\021" +
    "\065\142\001\002\000\046\005\uffd9\026\uffd9\027\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047" +
    "\uffd9\051\uffd9\001\002\000\004\051\uffd1\001\002\000\004" +
    "\051\146\001\002\000\010\050\136\051\uffd3\054\144\001" +
    "\002\000\004\051\uffd2\001\002\000\016\060\043\061\035" +
    "\062\025\063\042\064\021\065\142\001\002\000\004\051" +
    "\uffd0\001\002\000\046\005\uffd8\026\uffd8\027\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\051\uffd8\001\002\000\004\053\uffb7\001\002\000\056\006" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\015\ufff0\016\ufff0\017\ufff0" +
    "\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\032" +
    "\ufff0\037\ufff0\053\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0" +
    "\064\ufff0\065\ufff0\001\002\000\022\032\036\037\055\060" +
    "\043\061\035\062\025\063\042\064\021\065\154\001\002" +
    "\000\056\006\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\032\ufff7\037\ufff7\053\ufff7\060\ufff7\061\ufff7\062" +
    "\ufff7\063\ufff7\064\ufff7\065\ufff7\001\002\000\004\005\uffec" +
    "\001\002\000\046\005\uffeb\026\uff96\027\uff96\031\uff96\032" +
    "\uff96\033\uff96\034\uff96\035\uff96\036\uff96\040\uff96\041\uff96" +
    "\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050" +
    "\136\001\002\000\044\005\uffed\026\uff97\027\uff97\031\uff97" +
    "\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97\040\uff97\041" +
    "\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97" +
    "\001\002\000\044\005\uffea\026\uff95\027\uff95\031\uff95\032" +
    "\uff95\033\uff95\034\uff95\035\uff95\036\uff95\040\uff95\041\uff95" +
    "\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95\001" +
    "\002\000\004\053\ufffa\001\002\000\022\032\036\037\055" +
    "\060\043\061\035\062\025\063\042\064\021\065\167\001" +
    "\002\000\006\060\162\065\163\001\002\000\004\056\165" +
    "\001\002\000\004\056\164\001\002\000\006\005\uffdf\030" +
    "\uffe1\001\002\000\006\005\uffe0\030\uffe2\001\002\000\004" +
    "\005\uffe8\001\002\000\046\005\uffe7\026\uff96\027\uff96\031" +
    "\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96\040\uff96" +
    "\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047" +
    "\uff96\050\136\001\002\000\044\005\uffe9\026\uff97\027\uff97" +
    "\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97\040" +
    "\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97" +
    "\047\uff97\001\002\000\044\005\uffe6\026\uff95\027\uff95\031" +
    "\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\040\uff95" +
    "\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047" +
    "\uff95\001\002\000\004\056\173\001\002\000\004\065\uffe5" +
    "\001\002\000\056\006\uffef\011\uffef\012\uffef\013\uffef\015" +
    "\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef" +
    "\024\uffef\025\uffef\032\uffef\037\uffef\053\uffef\060\uffef\061" +
    "\uffef\062\uffef\063\uffef\064\uffef\065\uffef\001\002\000\020" +
    "\037\055\060\043\061\035\062\117\063\042\064\021\065" +
    "\120\001\002\000\004\051\177\001\002\000\004\052\200" +
    "\001\002\000\056\006\050\011\064\012\077\013\037\014" +
    "\107\015\051\016\045\017\024\020\070\021\033\022\073" +
    "\023\054\024\053\025\041\032\036\037\055\060\043\061" +
    "\035\062\025\063\042\064\021\065\071\001\002\000\004" +
    "\053\202\001\002\000\056\006\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\032\uffbe\037\uffbe\053\uffbe\060" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\001\002" +
    "\000\056\006\ufff6\011\ufff6\012\ufff6\013\ufff6\015\ufff6\016" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6" +
    "\025\ufff6\032\ufff6\037\ufff6\053\ufff6\060\ufff6\061\ufff6\062" +
    "\ufff6\063\ufff6\064\ufff6\065\ufff6\001\002\000\004\052\214" +
    "\001\002\000\004\050\206\001\002\000\020\037\055\060" +
    "\043\061\035\062\117\063\042\064\021\065\120\001\002" +
    "\000\004\051\210\001\002\000\004\052\211\001\002\000" +
    "\056\006\050\011\064\012\077\013\037\014\107\015\051" +
    "\016\045\017\024\020\070\021\033\022\073\023\054\024" +
    "\053\025\041\032\036\037\055\060\043\061\035\062\025" +
    "\063\042\064\021\065\071\001\002\000\004\053\213\001" +
    "\002\000\062\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0" +
    "\013\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\024\uffc0\025\uffc0\032\uffc0\037\uffc0\053\uffc0" +
    "\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\001" +
    "\002\000\056\006\050\011\064\012\077\013\037\014\107" +
    "\015\051\016\045\017\024\020\070\021\033\022\073\023" +
    "\054\024\053\025\041\032\036\037\055\060\043\061\035" +
    "\062\025\063\042\064\021\065\071\001\002\000\004\053" +
    "\216\001\002\000\062\006\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\032\uffbf\037\uffbf" +
    "\053\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065" +
    "\uffbf\001\002\000\056\006\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023" +
    "\ufff1\024\ufff1\025\ufff1\032\ufff1\037\ufff1\053\ufff1\060\ufff1" +
    "\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\001\002\000" +
    "\056\006\ufff2\011\ufff2\012\ufff2\013\ufff2\015\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025" +
    "\ufff2\032\ufff2\037\ufff2\053\ufff2\060\ufff2\061\ufff2\062\ufff2" +
    "\063\ufff2\064\ufff2\065\ufff2\001\002\000\016\060\043\061" +
    "\035\062\025\063\042\064\021\065\223\001\002\000\004" +
    "\051\225\001\002\000\004\051\224\001\002\000\004\005" +
    "\uffcb\001\002\000\004\005\uffca\001\002\000\004\053\ufff9" +
    "\001\002\000\004\005\236\001\002\000\046\005\235\026" +
    "\uff96\027\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035\uff96" +
    "\036\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045" +
    "\uff96\046\uff96\047\uff96\050\136\001\002\000\044\005\234" +
    "\026\uff97\027\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035" +
    "\uff97\036\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97" +
    "\045\uff97\046\uff97\047\uff97\001\002\000\044\005\233\026" +
    "\uff95\027\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95" +
    "\036\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045" +
    "\uff95\046\uff95\047\uff95\001\002\000\004\053\uffb3\001\002" +
    "\000\004\053\uffb6\001\002\000\004\053\uffb4\001\002\000" +
    "\004\053\uffb5\001\002\000\020\037\055\060\043\061\035" +
    "\062\117\063\042\064\021\065\120\001\002\000\004\051" +
    "\241\001\002\000\004\052\242\001\002\000\056\006\050" +
    "\011\064\012\077\013\037\014\107\015\051\016\045\017" +
    "\024\020\070\021\033\022\073\023\054\024\053\025\041" +
    "\032\036\037\055\060\043\061\035\062\025\063\042\064" +
    "\021\065\071\001\002\000\004\053\244\001\002\000\062" +
    "\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\032\uffc3\037\uffc3\053\uffc3\060\uffc3\061" +
    "\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\001\002\000\006" +
    "\007\204\010\205\001\002\000\062\006\uffc1\007\uffc1\010" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\015\uffc1\016\uffc1\017\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\032" +
    "\uffc1\037\uffc1\053\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1" +
    "\064\uffc1\065\uffc1\001\002\000\062\006\uffc2\007\uffc2\010" +
    "\uffc2\011\uffc2\012\uffc2\013\uffc2\015\uffc2\016\uffc2\017\uffc2" +
    "\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\032" +
    "\uffc2\037\uffc2\053\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2" +
    "\064\uffc2\065\uffc2\001\002\000\056\006\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\032\ufff3\037\ufff3\053" +
    "\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3" +
    "\001\002\000\006\005\uffa7\051\uffa7\001\002\000\006\060" +
    "\254\061\253\001\002\000\004\051\256\001\002\000\004" +
    "\051\255\001\002\000\004\005\uffcd\001\002\000\004\005" +
    "\uffcc\001\002\000\056\006\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023" +
    "\ufff5\024\ufff5\025\ufff5\032\ufff5\037\ufff5\053\ufff5\060\ufff5" +
    "\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\001\002\000" +
    "\020\037\055\060\043\061\035\062\262\063\042\064\021" +
    "\065\120\001\002\000\004\051\301\001\002\000\024\026" +
    "\uff87\034\uff87\040\uff87\041\uff87\044\uff87\045\uff87\046\uff87" +
    "\047\uff87\051\275\001\002\000\004\051\271\001\002\000" +
    "\022\026\127\034\131\040\265\041\266\044\126\045\124" +
    "\046\132\047\123\001\002\000\016\060\uff99\061\uff99\062" +
    "\uff99\063\uff99\064\uff99\065\uff99\001\002\000\016\060\uff98" +
    "\061\uff98\062\uff98\063\uff98\064\uff98\065\uff98\001\002\000" +
    "\016\060\043\061\035\062\025\063\042\064\021\065\120" +
    "\001\002\000\006\005\uff9a\051\uff9a\001\002\000\004\052" +
    "\272\001\002\000\056\006\050\011\064\012\077\013\037" +
    "\014\107\015\051\016\045\017\024\020\070\021\033\022" +
    "\073\023\054\024\053\025\041\032\036\037\055\060\043" +
    "\061\035\062\025\063\042\064\021\065\071\001\002\000" +
    "\004\053\274\001\002\000\056\006\uffba\011\uffba\012\uffba" +
    "\013\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022" +
    "\uffba\023\uffba\024\uffba\025\uffba\032\uffba\037\uffba\053\uffba" +
    "\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\001" +
    "\002\000\004\052\276\001\002\000\056\006\050\011\064" +
    "\012\077\013\037\014\107\015\051\016\045\017\024\020" +
    "\070\021\033\022\073\023\054\024\053\025\041\032\036" +
    "\037\055\060\043\061\035\062\025\063\042\064\021\065" +
    "\071\001\002\000\004\053\300\001\002\000\056\006\uffb9" +
    "\011\uffb9\012\uffb9\013\uffb9\015\uffb9\016\uffb9\017\uffb9\020" +
    "\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\032\uffb9" +
    "\037\uffb9\053\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064" +
    "\uffb9\065\uffb9\001\002\000\004\052\302\001\002\000\056" +
    "\006\050\011\064\012\077\013\037\014\107\015\051\016" +
    "\045\017\024\020\070\021\033\022\073\023\054\024\053" +
    "\025\041\032\036\037\055\060\043\061\035\062\025\063" +
    "\042\064\021\065\071\001\002\000\004\053\304\001\002" +
    "\000\056\006\uffb8\011\uffb8\012\uffb8\013\uffb8\015\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\032\uffb8\037\uffb8\053\uffb8\060\uffb8\061\uffb8\062" +
    "\uffb8\063\uffb8\064\uffb8\065\uffb8\001\002\000\004\005\uffa4" +
    "\001\002\000\004\002\uffff\001\002\000\016\060\uff9d\061" +
    "\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\001\002\000\016" +
    "\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\001" +
    "\002\000\004\005\uffa5\001\002\000\016\060\uff9e\061\uff9e" +
    "\062\uff9e\063\uff9e\064\uff9e\065\uff9e\001\002\000\004\005" +
    "\uffa3\001\002\000\016\060\uff9b\061\uff9b\062\uff9b\063\uff9b" +
    "\064\uff9b\065\uff9b\001\002\000\004\005\uffa2\001\002\000" +
    "\016\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f" +
    "\001\002\000\016\060\043\061\035\062\025\063\042\064" +
    "\021\065\120\001\002\000\016\060\uff9c\061\uff9c\062\uff9c" +
    "\063\uff9c\064\uff9c\065\uff9c\001\002\000\004\005\uffa1\001" +
    "\002\000\006\005\uffee\030\uffee\001\002\000\006\060\324" +
    "\063\325\001\002\000\004\005\uffe4\001\002\000\004\005" +
    "\uffe3\001\002\000\004\002\001\001\002\000\004\050\330" +
    "\001\002\000\032\016\045\017\024\020\070\021\033\022" +
    "\073\051\331\060\043\061\035\062\025\063\042\064\021" +
    "\065\334\001\002\000\004\052\355\001\002\000\004\065" +
    "\352\001\002\000\004\051\346\001\002\000\004\051\342" +
    "\001\002\000\004\051\336\001\002\000\004\052\337\001" +
    "\002\000\054\006\050\011\064\012\077\013\037\015\051" +
    "\016\045\017\024\020\070\021\033\022\073\023\054\024" +
    "\053\025\041\032\036\037\055\060\043\061\035\062\025" +
    "\063\042\064\021\065\071\001\002\000\004\053\341\001" +
    "\002\000\010\016\uffd5\020\uffd5\021\uffd5\001\002\000\004" +
    "\052\343\001\002\000\054\006\050\011\064\012\077\013" +
    "\037\015\051\016\045\017\024\020\070\021\033\022\073" +
    "\023\054\024\053\025\041\032\036\037\055\060\043\061" +
    "\035\062\025\063\042\064\021\065\071\001\002\000\004" +
    "\053\345\001\002\000\010\016\uffd6\020\uffd6\021\uffd6\001" +
    "\002\000\004\052\347\001\002\000\054\006\050\011\064" +
    "\012\077\013\037\015\051\016\045\017\024\020\070\021" +
    "\033\022\073\023\054\024\053\025\041\032\036\037\055" +
    "\060\043\061\035\062\025\063\042\064\021\065\071\001" +
    "\002\000\004\053\351\001\002\000\010\016\uffd4\020\uffd4" +
    "\021\uffd4\001\002\000\006\051\uffcf\054\353\001\002\000" +
    "\014\016\045\017\024\020\070\021\033\022\073\001\002" +
    "\000\004\051\uffce\001\002\000\054\006\050\011\064\012" +
    "\077\013\037\015\051\016\045\017\024\020\070\021\033" +
    "\022\073\023\054\024\053\025\041\032\036\037\055\060" +
    "\043\061\035\062\025\063\042\064\021\065\071\001\002" +
    "\000\004\053\357\001\002\000\010\016\uffd7\020\uffd7\021" +
    "\uffd7\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\012\002\010\003\003\007\004\056\005\001" +
    "\001\000\002\001\001\000\010\003\357\007\004\056\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\100\004\033\005" +
    "\074\010\057\013\071\014\073\015\062\016\037\017\075" +
    "\020\065\021\051\022\061\023\056\024\043\025\060\026" +
    "\030\027\064\032\055\033\027\034\077\035\016\036\022" +
    "\037\026\040\021\041\045\047\031\050\101\051\066\052" +
    "\017\053\100\054\046\055\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\042\316\043\124\044" +
    "\310\045\127\046\266\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\113\033\304\047\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\113\033\250\047\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\010\231\032\226\033\027" +
    "\034\077\035\016\036\022\037\026\040\021\041\045\047" +
    "\230\001\001\000\100\004\225\005\074\010\057\013\071" +
    "\014\073\015\062\016\037\017\075\020\065\021\051\022" +
    "\061\023\056\024\043\025\060\026\030\027\064\032\055" +
    "\033\027\034\077\035\016\036\022\037\026\040\021\041" +
    "\045\047\031\050\101\051\066\052\017\053\100\054\046" +
    "\055\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\004\156\005\074\010\057\013\071\014\073\015\062" +
    "\016\037\017\075\020\065\021\051\022\061\023\056\024" +
    "\043\025\060\026\030\027\064\032\055\033\027\034\077" +
    "\035\016\036\022\037\026\040\021\041\045\047\031\050" +
    "\101\051\066\052\017\053\100\054\046\055\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\104\004" +
    "\104\005\074\006\107\010\057\013\071\014\073\015\062" +
    "\016\037\017\075\020\065\021\051\022\061\023\056\024" +
    "\043\025\060\026\030\027\064\031\105\032\055\033\027" +
    "\034\077\035\016\036\022\037\026\040\021\041\045\047" +
    "\031\050\101\051\066\052\017\053\100\054\046\055\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\010\113\030\120\033\121\036\115\037\114\041" +
    "\045\047\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\043\124\045\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\113\033\133\047" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\113\033\132\047\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\137\011\140\047\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\137\011\144\047" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\010\155\032\152\033" +
    "\027\034\077\035\016\036\022\037\026\040\021\041\045" +
    "\047\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\010\170\032\165\033\027\034\077\035" +
    "\016\036\022\037\026\040\021\041\045\047\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\010\113" +
    "\030\175\033\121\036\115\037\114\041\045\047\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\104\004\104" +
    "\005\074\006\200\010\057\013\071\014\073\015\062\016" +
    "\037\017\075\020\065\021\051\022\061\023\056\024\043" +
    "\025\060\026\030\027\064\031\105\032\055\033\027\034" +
    "\077\035\016\036\022\037\026\040\021\041\045\047\031" +
    "\050\101\051\066\052\017\053\100\054\046\055\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\010\113\030" +
    "\206\033\121\036\115\037\114\041\045\047\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\104\004\104\005" +
    "\074\006\211\010\057\013\071\014\073\015\062\016\037" +
    "\017\075\020\065\021\051\022\061\023\056\024\043\025" +
    "\060\026\030\027\064\031\105\032\055\033\027\034\077" +
    "\035\016\036\022\037\026\040\021\041\045\047\031\050" +
    "\101\051\066\052\017\053\100\054\046\055\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\104\004\104\005" +
    "\074\006\214\010\057\013\071\014\073\015\062\016\037" +
    "\017\075\020\065\021\051\022\061\023\056\024\043\025" +
    "\060\026\030\027\064\031\105\032\055\033\027\034\077" +
    "\035\016\036\022\037\026\040\021\041\045\047\031\050" +
    "\101\051\066\052\017\053\100\054\046\055\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\010\113" +
    "\030\237\033\121\036\115\037\114\041\045\047\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\104\004\104" +
    "\005\074\006\242\010\057\013\071\014\073\015\062\016" +
    "\037\017\075\020\065\021\051\022\061\023\056\024\043" +
    "\025\060\026\030\027\064\031\105\032\055\033\027\034" +
    "\077\035\016\036\022\037\026\040\021\041\045\047\031" +
    "\050\101\051\066\052\017\053\100\054\046\055\025\001" +
    "\001\000\002\001\001\000\010\022\244\023\246\024\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\010\113\030\262" +
    "\033\263\036\115\037\114\040\260\041\045\047\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\043\124\045\127\046\266\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\113\033\267\047\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\104\004" +
    "\104\005\074\006\272\010\057\013\071\014\073\015\062" +
    "\016\037\017\075\020\065\021\051\022\061\023\056\024" +
    "\043\025\060\026\030\027\064\031\105\032\055\033\027" +
    "\034\077\035\016\036\022\037\026\040\021\041\045\047" +
    "\031\050\101\051\066\052\017\053\100\054\046\055\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\104\004\104\005\074\006\276\010\057\013\071" +
    "\014\073\015\062\016\037\017\075\020\065\021\051\022" +
    "\061\023\056\024\043\025\060\026\030\027\064\031\105" +
    "\032\055\033\027\034\077\035\016\036\022\037\026\040" +
    "\021\041\045\047\031\050\101\051\066\052\017\053\100" +
    "\054\046\055\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\104\004\104\005\074\006\302" +
    "\010\057\013\071\014\073\015\062\016\037\017\075\020" +
    "\065\021\051\022\061\023\056\024\043\025\060\026\030" +
    "\027\064\031\105\032\055\033\027\034\077\035\016\036" +
    "\022\037\026\040\021\041\045\047\031\050\101\051\066" +
    "\052\017\053\100\054\046\055\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\113\033\320\047" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\332" +
    "\047\334\050\101\051\066\055\331\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\100\004\337\005" +
    "\074\010\057\013\071\014\073\015\062\016\037\017\075" +
    "\020\065\021\051\022\061\023\056\024\043\025\060\026" +
    "\030\027\064\032\055\033\027\034\077\035\016\036\022" +
    "\037\026\040\021\041\045\047\031\050\101\051\066\052" +
    "\017\053\100\054\046\055\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\100\004\343\005" +
    "\074\010\057\013\071\014\073\015\062\016\037\017\075" +
    "\020\065\021\051\022\061\023\056\024\043\025\060\026" +
    "\030\027\064\032\055\033\027\034\077\035\016\036\022" +
    "\037\026\040\021\041\045\047\031\050\101\051\066\052" +
    "\017\053\100\054\046\055\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\100\004\347\005" +
    "\074\010\057\013\071\014\073\015\062\016\037\017\075" +
    "\020\065\021\051\022\061\023\056\024\043\025\060\026" +
    "\030\027\064\032\055\033\027\034\077\035\016\036\022" +
    "\037\026\040\021\041\045\047\031\050\101\051\066\052" +
    "\017\053\100\054\046\055\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\353\050" +
    "\101\051\066\055\331\001\001\000\002\001\001\000\100" +
    "\004\355\005\074\010\057\013\071\014\073\015\062\016" +
    "\037\017\075\020\065\021\051\022\061\023\056\024\043" +
    "\025\060\026\030\027\064\032\055\033\027\034\077\035" +
    "\016\036\022\037\026\040\021\041\045\047\031\050\101" +
    "\051\066\052\017\053\100\054\046\055\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    
    public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder(message + ": ");

    if (info instanceof java_cup.runtime.Symbol) 
      m.append( info.toString() );
    
    System.out.println(m);



  }
/*public void syntax_error(Symbol s) {
    String lexema = s.value.toString();
    int linea = s.right();
    int columna = s.left();
    
    System.out.println("[ERROR SINTACTICO] = Lexema: "+" Fila: "+linea+" Columna: "+columna);

  }*/  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= INT MAIN PARENTESISABRE PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;
		System.out.println("Main");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= crearFuncion programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloqueCod ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloqueCod ::= estructControl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bloqueCod ::= return 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bloqueCod ::= sentencia bloqueCod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bloqueCod ::= estructControl bloqueCod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloqueCod ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= crearVariable FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= crearAsignarVariable FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= asignarVariable FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= asignarElementoArreglo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= obtenerDatoArreglo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= expresion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= funcion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= entradaEst FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= salidaEst FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // crearVariable ::= tipoVariable Identificador 
            {
              Object RESULT =null;
		int tVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Tipo variable: "+tVar);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearVariable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // crearAsignarVariable ::= crearVariable EQ literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // crearAsignarVariable ::= crearVariable EQ expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // crearAsignarVariable ::= crearVariable EQ Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // crearAsignarVariable ::= crearVariable EQ funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // asignarVariable ::= Identificador EQ literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // asignarVariable ::= Identificador EQ expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // asignarVariable ::= Identificador EQ Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asignarVariable ::= Identificador EQ funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arreglo ::= tipoArreglo LLAVESCUADABRE LLAVESCUADCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // asignarElementoArreglo ::= elementoArreglo EQ L_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarElementoArreglo",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // asignarElementoArreglo ::= elementoArreglo EQ L_CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarElementoArreglo",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // elementoArreglo ::= Identificador LLAVESCUADABRE L_ENTERO LLAVESCUADCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementoArreglo",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // elementoArreglo ::= Identificador LLAVESCUADABRE Identificador LLAVESCUADCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementoArreglo",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // obtenerDatoArreglo ::= Identificador LLAVESCUADABRE L_ENTERO LLAVESCUADCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("obtenerDatoArreglo",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // obtenerDatoArreglo ::= Identificador LLAVESCUADABRE Identificador LLAVESCUADCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("obtenerDatoArreglo",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresionBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresionUnaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresionRelacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= expresionNegacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresionConjuntiva 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funcion ::= Identificador PARENTESISABRE PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funcion ::= Identificador PARENTESISABRE parametro PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // crearFuncion ::= tipoFuncion Identificador PARENTESISABRE PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // crearFuncion ::= tipoFuncion Identificador PARENTESISABRE Identificador PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // crearFuncion ::= tipoFuncion Identificador PARENTESISABRE literal PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // crearFuncion ::= tipoFuncion Identificador PARENTESISABRE crearParametro PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametro ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametro ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametro ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametro ::= Identificador COMA parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // crearParametro ::= tipoVariable Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearParametro",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // crearParametro ::= tipoVariable Identificador COMA crearParametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearParametro",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // entradaEst ::= SYS_READ PARENTESISABRE L_ENTERO PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entradaEst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // entradaEst ::= SYS_READ PARENTESISABRE L_FLOTANTE PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entradaEst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // salidaEst ::= SYS_PRINT PARENTESISABRE Identificador PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salidaEst",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // salidaEst ::= SYS_PRINT PARENTESISABRE literal PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salidaEst",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // estructControl ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // estructControl ::= elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // estructControl ::= else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // estructControl ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // estructControl ::= do 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // estructControl ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if ::= IF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if ::= IF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // if ::= IF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // elif ::= if ELIF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // else ::= if ELSE LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // while ::= WHILE PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // do ::= DO LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA WHILE PARENTESISABRE condicion PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // bloqueControl ::= bloqueCod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueControl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // bloqueControl ::= break 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueControl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // for ::= FOR PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // for ::= FOR PARENTESISABRE L_BOOLEANO PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // for ::= FOR PARENTESISABRE expresionConjuntiva PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // break ::= BREAK FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // return ::= RETURN literal FIN_EXPRESION 
            {
              Object RESULT =null;
		int iDLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iDLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object iDL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println(iDL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // return ::= RETURN expresion FIN_EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // return ::= RETURN Identificador FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // return ::= RETURN funcion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // condicion ::= L_BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // condicion ::= expresionRelacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // condicion ::= expresionNegacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresionRelacion ::= operando operadorRelacional operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresionRelacion ::= operando operadorComparacion operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operadorRelacional ::= GREATER_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operadorRelacional ::= LESS_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operadorRelacional ::= GREATER_THAN_OR_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operadorRelacional ::= LESS_THAN_OR_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operadorComparacion ::= EQEQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorComparacion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operadorComparacion ::= NOT_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorComparacion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresionNegacion ::= operadorNegacion operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionNegacion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operadorNegacion ::= NEGACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorNegacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresionUnaria ::= operando operadorUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnaria",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresionUnaria ::= MINUS operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnaria",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operadorUnario ::= MINUSMINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operadorUnario ::= PLUSPLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresionBinaria ::= operando operadorBinario operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operadorBinario ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operadorBinario ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operadorBinario ::= DIVI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operadorBinario ::= TIMES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operadorBinario ::= POWER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operadorBinario ::= MODULO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresionConjuntiva ::= operando operadorConjuntiva operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionConjuntiva",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operadorConjuntiva ::= CONJUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorConjuntiva",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operadorConjuntiva ::= DISYUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorConjuntiva",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operando ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operando ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operando ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tipoFuncion ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tipoFuncion ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tipoFuncion ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tipoVariable ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tipoVariable ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tipoVariable ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // tipoVariable ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // tipoVariable ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // tipoVariable ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // tipoArreglo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoArreglo",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // tipoArreglo ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoArreglo",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // literal ::= L_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // literal ::= L_FLOTANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // literal ::= L_BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // literal ::= L_CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
