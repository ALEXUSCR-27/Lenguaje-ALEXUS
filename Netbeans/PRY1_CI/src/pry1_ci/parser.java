
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pry1_ci;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import pry1_ci.VerificadorTipos;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\002\003\000\002\004" +
    "\005\000\002\004\004\000\002\012\004\000\002\012\003" +
    "\000\002\003\010\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\004\000\002\005\004\000\002" +
    "\005\003\000\002\016\004\000\002\016\004\000\002\016" +
    "\004\000\002\016\004\000\002\016\004\000\002\016\004" +
    "\000\002\016\004\000\002\016\004\000\002\016\004\000" +
    "\002\063\002\000\002\016\005\000\002\017\004\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\004\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\053\004\000" +
    "\002\056\005\000\002\056\005\000\002\054\006\000\002" +
    "\054\006\000\002\057\006\000\002\057\006\000\002\011" +
    "\005\000\002\011\006\000\002\010\010\000\002\010\011" +
    "\000\002\010\011\000\002\010\011\000\002\010\003\000" +
    "\002\015\004\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\005\000\002\014\003\000\002\014" +
    "\005\000\002\022\006\000\002\022\006\000\002\023\006" +
    "\000\002\023\006\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\025\011\000\002\025" +
    "\012\000\002\025\012\000\002\026\012\000\002\027\007" +
    "\000\002\030\011\000\002\031\012\000\002\007\003\000" +
    "\002\007\003\000\002\032\011\000\002\032\011\000\002" +
    "\032\011\000\002\034\004\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\041\005\000\002\041\005\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\050\003\000\002\050\003\000\002\042\004\000" +
    "\002\044\003\000\002\040\004\000\002\040\004\000\002" +
    "\047\003\000\002\047\003\000\002\037\005\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\043\005\000" +
    "\002\051\003\000\002\051\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\012\015\006\017\014\020\005\022\013\001" +
    "\002\000\004\002\000\001\002\000\004\064\uff8b\001\002" +
    "\000\004\064\uff8a\001\002\000\004\064\365\001\002\000" +
    "\012\003\017\015\006\017\014\020\005\001\002\000\004" +
    "\002\363\001\002\000\004\047\356\001\002\000\010\015" +
    "\006\017\014\020\005\001\002\000\004\064\uff89\001\002" +
    "\000\012\003\017\015\006\017\014\020\005\001\002\000" +
    "\004\047\023\001\002\000\014\002\uffd2\003\uffd2\015\uffd2" +
    "\017\uffd2\020\uffd2\001\002\000\014\002\ufffc\003\ufffc\015" +
    "\ufffc\017\ufffc\020\ufffc\001\002\000\014\002\uffff\003\017" +
    "\015\006\017\014\020\005\001\002\000\014\002\ufffd\003" +
    "\ufffd\015\ufffd\017\ufffd\020\ufffd\001\002\000\032\015\026" +
    "\016\042\017\043\020\024\021\034\050\027\057\031\060" +
    "\037\061\035\062\025\063\033\064\040\001\002\000\004" +
    "\064\uff88\001\002\000\046\004\uff80\025\uff80\026\uff80\030" +
    "\uff80\031\uff80\032\uff80\033\uff80\034\uff80\035\uff80\037\uff80" +
    "\040\uff80\041\uff80\042\uff80\043\uff80\044\uff80\045\uff80\046" +
    "\uff80\050\uff80\001\002\000\004\064\uff87\001\002\000\004" +
    "\051\353\001\002\000\004\064\352\001\002\000\046\004" +
    "\uff83\025\uff83\026\uff83\030\uff83\031\uff83\032\uff83\033\uff83" +
    "\034\uff83\035\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043" +
    "\uff83\044\uff83\045\uff83\046\uff83\050\uff83\001\002\000\004" +
    "\050\346\001\002\000\046\004\uff7f\025\uff7f\026\uff7f\030" +
    "\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f\035\uff7f\037\uff7f" +
    "\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046" +
    "\uff7f\050\uff7f\001\002\000\004\064\uff84\001\002\000\046" +
    "\004\uff81\025\uff81\026\uff81\030\uff81\031\uff81\032\uff81\033" +
    "\uff81\034\uff81\035\uff81\037\uff81\040\uff81\041\uff81\042\uff81" +
    "\043\uff81\044\uff81\045\uff81\046\uff81\050\uff81\001\002\000" +
    "\006\050\uffcc\053\344\001\002\000\046\004\uff82\025\uff82" +
    "\026\uff82\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035" +
    "\uff82\037\uff82\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82" +
    "\045\uff82\046\uff82\050\uff82\001\002\000\004\050\340\001" +
    "\002\000\004\050\044\001\002\000\004\064\uff85\001\002" +
    "\000\004\064\uff86\001\002\000\004\051\045\001\002\000" +
    "\056\003\072\005\066\010\104\011\113\012\060\014\067" +
    "\015\026\016\042\017\043\020\024\021\034\022\073\023" +
    "\070\024\062\031\057\036\074\057\031\060\037\061\035" +
    "\062\025\063\033\064\106\001\002\000\004\004\uffaa\001" +
    "\002\000\004\027\335\001\002\000\004\004\uffa7\001\002" +
    "\000\004\004\uffa9\001\002\000\004\004\uffa8\001\002\000" +
    "\042\025\142\026\323\030\322\031\331\032\325\033\144" +
    "\034\333\035\327\037\301\040\300\041\326\042\330\043" +
    "\141\044\136\045\145\046\137\001\002\000\046\004\uff8e" +
    "\025\uff8e\026\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034" +
    "\uff8e\035\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e" +
    "\044\uff8e\045\uff8e\046\uff8e\050\uff8e\001\002\000\060\003" +
    "\uffc2\005\uffc2\010\uffc2\011\uffc2\012\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\031\uffc2\036\uffc2\052\uffc2\057\uffc2\060\uffc2\061\uffc2" +
    "\062\uffc2\063\uffc2\064\uffc2\001\002\000\004\052\321\001" +
    "\002\000\016\057\031\060\037\061\035\062\025\063\033" +
    "\064\134\001\002\000\004\047\273\001\002\000\004\004" +
    "\272\001\002\000\004\047\265\001\002\000\016\057\031" +
    "\060\037\061\035\062\025\063\033\064\134\001\002\000" +
    "\060\003\uffc4\005\uffc4\010\uffc4\011\uffc4\012\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\031\uffc4\036\uffc4\052\uffc4\057\uffc4\060\uffc4" +
    "\061\uffc4\062\uffc4\063\uffc4\064\uffc4\001\002\000\004\004" +
    "\263\001\002\000\004\047\252\001\002\000\022\031\057" +
    "\036\074\057\031\060\037\061\035\062\025\063\033\064" +
    "\243\001\002\000\004\047\235\001\002\000\060\003\072" +
    "\005\066\010\104\011\113\012\060\014\067\015\026\016" +
    "\042\017\043\020\024\021\034\022\073\023\070\024\062" +
    "\031\057\036\074\052\ufff9\057\031\060\037\061\035\062" +
    "\025\063\033\064\106\001\002\000\062\003\uffc0\004\uffeb" +
    "\005\uffc0\010\uffc0\011\uffc0\012\uffc0\014\uffc0\015\uffc0\016" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\031\uffc0\036\uffc0\052\uffc0\057\uffc0\060\uffc0\061\uffc0\062" +
    "\uffc0\063\uffc0\064\uffc0\001\002\000\004\052\ufff5\001\002" +
    "\000\016\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\064" +
    "\uff9d\001\002\000\004\004\231\001\002\000\060\003\uffc5" +
    "\005\uffc5\010\uffc5\011\uffc5\012\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\031\uffc5\036\uffc5\052\uffc5\057\uffc5\060\uffc5\061\uffc5\062" +
    "\uffc5\063\uffc5\064\uffc5\001\002\000\044\004\230\025\uff8c" +
    "\026\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035" +
    "\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c" +
    "\045\uff8c\046\uff8c\001\002\000\060\003\uffc3\005\uffc3\010" +
    "\uffc3\011\uffc3\012\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\031\uffc3\036" +
    "\uffc3\052\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3" +
    "\064\uffc3\001\002\000\064\003\uffc6\005\uffc6\006\215\007" +
    "\216\010\uffc6\011\uffc6\012\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\031" +
    "\uffc6\036\uffc6\052\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6" +
    "\063\uffc6\064\uffc6\001\002\000\004\004\214\001\002\000" +
    "\060\003\uffc1\005\uffc1\010\uffc1\011\uffc1\012\uffc1\014\uffc1" +
    "\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\031\uffc1\036\uffc1\052\uffc1\057\uffc1\060\uffc1" +
    "\061\uffc1\062\uffc1\063\uffc1\064\uffc1\001\002\000\004\047" +
    "\206\001\002\000\004\004\205\001\002\000\050\025\uff8d" +
    "\026\uff8d\027\173\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034" +
    "\uff8d\035\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d" +
    "\044\uff8d\045\uff8d\046\uff8d\047\150\054\174\001\002\000" +
    "\060\003\072\005\066\010\104\011\113\012\060\014\067" +
    "\015\026\016\042\017\043\020\024\021\034\022\073\023" +
    "\070\024\062\031\057\036\074\052\ufffa\057\031\060\037" +
    "\061\035\062\025\063\033\064\106\001\002\000\006\004" +
    "\165\027\164\001\002\000\004\052\ufff8\001\002\000\004" +
    "\004\163\001\002\000\004\051\117\001\002\000\004\004" +
    "\uffab\001\002\000\004\004\116\001\002\000\060\003\ufff1" +
    "\005\ufff1\010\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1" +
    "\031\ufff1\036\ufff1\052\ufff1\057\ufff1\060\ufff1\061\ufff1\062" +
    "\ufff1\063\ufff1\064\ufff1\001\002\000\060\003\072\005\066" +
    "\010\104\011\113\012\060\013\122\014\067\015\026\016" +
    "\042\017\043\020\024\021\034\022\073\023\070\024\062" +
    "\031\057\036\074\057\031\060\037\061\035\062\025\063" +
    "\033\064\106\001\002\000\004\052\uffb8\001\002\000\004" +
    "\052\uffb7\001\002\000\004\004\162\001\002\000\004\052" +
    "\124\001\002\000\004\010\125\001\002\000\004\047\126" +
    "\001\002\000\020\036\074\057\031\060\037\061\132\062" +
    "\025\063\033\064\134\001\002\000\026\004\uff8c\025\uff8c" +
    "\033\uff8c\037\uff8c\040\uff8c\043\uff8c\044\uff8c\045\uff8c\046" +
    "\uff8c\050\uff8c\001\002\000\004\050\uffad\001\002\000\004" +
    "\050\uffac\001\002\000\020\025\uff81\033\uff81\043\uff81\044" +
    "\uff81\045\uff81\046\uff81\050\uffae\001\002\000\004\050\161" +
    "\001\002\000\030\004\uff8d\025\uff8d\033\uff8d\037\uff8d\040" +
    "\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\150\050\uff8d" +
    "\001\002\000\016\025\142\033\144\043\141\044\136\045" +
    "\145\046\137\001\002\000\016\057\uffa3\060\uffa3\061\uffa3" +
    "\062\uffa3\063\uffa3\064\uffa3\001\002\000\016\057\uffa1\060" +
    "\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\001\002\000\016" +
    "\057\031\060\037\061\035\062\025\063\033\064\134\001" +
    "\002\000\016\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4" +
    "\064\uffa4\001\002\000\016\057\uffa0\060\uffa0\061\uffa0\062" +
    "\uffa0\063\uffa0\064\uffa0\001\002\000\016\057\031\060\037" +
    "\061\035\062\025\063\033\064\134\001\002\000\016\057" +
    "\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\001\002" +
    "\000\016\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064" +
    "\uffa2\001\002\000\006\004\uffa5\050\uffa5\001\002\000\006" +
    "\004\uffa6\050\uffa6\001\002\000\020\050\152\057\031\060" +
    "\037\061\035\062\025\063\033\064\154\001\002\000\004" +
    "\050\uffce\001\002\000\046\004\uffd8\025\uffd8\026\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046" +
    "\uffd8\050\uffd8\001\002\000\004\050\160\001\002\000\010" +
    "\047\150\050\uffd0\053\156\001\002\000\004\050\uffcf\001" +
    "\002\000\016\057\031\060\037\061\035\062\025\063\033" +
    "\064\154\001\002\000\004\050\uffcd\001\002\000\046\004" +
    "\uffd7\025\uffd7\026\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043" +
    "\uffd7\044\uffd7\045\uffd7\046\uffd7\050\uffd7\001\002\000\060" +
    "\003\uffb9\005\uffb9\010\uffb9\011\uffb9\012\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\031\uffb9\036\uffb9\052\uffb9\057\uffb9\060\uffb9\061" +
    "\uffb9\062\uffb9\063\uffb9\064\uffb9\001\002\000\004\052\uffb3" +
    "\001\002\000\060\003\uffed\005\uffed\010\uffed\011\uffed\012" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\024\uffed\031\uffed\036\uffed\052\uffed\057" +
    "\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed\001\002" +
    "\000\022\031\057\036\074\057\031\060\037\061\035\062" +
    "\025\063\033\064\167\001\002\000\062\003\ufff4\004\uffe4" +
    "\005\ufff4\010\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\031\ufff4\036\ufff4\052\ufff4\057\ufff4\060\ufff4\061\ufff4\062" +
    "\ufff4\063\ufff4\064\ufff4\001\002\000\004\004\uffe7\001\002" +
    "\000\046\004\uffe6\025\uff8d\026\uff8d\030\uff8d\031\uff8d\032" +
    "\uff8d\033\uff8d\034\uff8d\035\uff8d\037\uff8d\040\uff8d\041\uff8d" +
    "\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\150\001" +
    "\002\000\044\004\uffe8\025\uff8e\026\uff8e\030\uff8e\031\uff8e" +
    "\032\uff8e\033\uff8e\034\uff8e\035\uff8e\037\uff8e\040\uff8e\041" +
    "\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\001\002" +
    "\000\044\004\uffe5\025\uff8c\026\uff8c\030\uff8c\031\uff8c\032" +
    "\uff8c\033\uff8c\034\uff8c\035\uff8c\037\uff8c\040\uff8c\041\uff8c" +
    "\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\001\002\000" +
    "\004\052\ufff7\001\002\000\022\031\057\036\074\057\031" +
    "\060\037\061\035\062\025\063\033\064\202\001\002\000" +
    "\006\057\175\064\176\001\002\000\004\055\200\001\002" +
    "\000\004\055\177\001\002\000\006\004\uffd9\027\uffdb\001" +
    "\002\000\006\004\uffda\027\uffdc\001\002\000\004\004\uffe2" +
    "\001\002\000\046\004\uffe1\025\uff8d\026\uff8d\030\uff8d\031" +
    "\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\037\uff8d\040\uff8d" +
    "\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047" +
    "\150\001\002\000\044\004\uffe3\025\uff8e\026\uff8e\030\uff8e" +
    "\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\037\uff8e\040" +
    "\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e" +
    "\001\002\000\044\004\uffe0\025\uff8c\026\uff8c\030\uff8c\031" +
    "\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\037\uff8c\040\uff8c" +
    "\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\001" +
    "\002\000\060\003\uffec\005\uffec\010\uffec\011\uffec\012\uffec" +
    "\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\024\uffec\031\uffec\036\uffec\052\uffec\057\uffec" +
    "\060\uffec\061\uffec\062\uffec\063\uffec\064\uffec\001\002\000" +
    "\020\036\074\057\031\060\037\061\132\062\025\063\033" +
    "\064\134\001\002\000\004\050\210\001\002\000\004\051" +
    "\211\001\002\000\060\003\072\005\066\010\104\011\113" +
    "\012\060\013\122\014\067\015\026\016\042\017\043\020" +
    "\024\021\034\022\073\023\070\024\062\031\057\036\074" +
    "\057\031\060\037\061\035\062\025\063\033\064\106\001" +
    "\002\000\004\052\213\001\002\000\060\003\uffba\005\uffba" +
    "\010\uffba\011\uffba\012\uffba\014\uffba\015\uffba\016\uffba\017" +
    "\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\031\uffba" +
    "\036\uffba\052\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063" +
    "\uffba\064\uffba\001\002\000\060\003\ufff3\005\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\031\ufff3\036\ufff3" +
    "\052\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064" +
    "\ufff3\001\002\000\004\051\225\001\002\000\004\047\217" +
    "\001\002\000\020\036\074\057\031\060\037\061\132\062" +
    "\025\063\033\064\134\001\002\000\004\050\221\001\002" +
    "\000\004\051\222\001\002\000\060\003\072\005\066\010" +
    "\104\011\113\012\060\013\122\014\067\015\026\016\042" +
    "\017\043\020\024\021\034\022\073\023\070\024\062\031" +
    "\057\036\074\057\031\060\037\061\035\062\025\063\033" +
    "\064\106\001\002\000\004\052\224\001\002\000\064\003" +
    "\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc" +
    "\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022" +
    "\uffbc\023\uffbc\024\uffbc\031\uffbc\036\uffbc\052\uffbc\057\uffbc" +
    "\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\001\002\000" +
    "\060\003\072\005\066\010\104\011\113\012\060\013\122" +
    "\014\067\015\026\016\042\017\043\020\024\021\034\022" +
    "\073\023\070\024\062\031\057\036\074\057\031\060\037" +
    "\061\035\062\025\063\033\064\106\001\002\000\004\052" +
    "\227\001\002\000\064\003\uffbb\005\uffbb\006\uffbb\007\uffbb" +
    "\010\uffbb\011\uffbb\012\uffbb\014\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\031\uffbb" +
    "\036\uffbb\052\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063" +
    "\uffbb\064\uffbb\001\002\000\060\003\uffee\005\uffee\010\uffee" +
    "\011\uffee\012\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\024\uffee\031\uffee\036\uffee" +
    "\052\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064" +
    "\uffee\001\002\000\060\003\uffef\005\uffef\010\uffef\011\uffef" +
    "\012\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021" +
    "\uffef\022\uffef\023\uffef\024\uffef\031\uffef\036\uffef\052\uffef" +
    "\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef\001" +
    "\002\000\004\004\233\001\002\000\060\003\uffea\005\uffea" +
    "\010\uffea\011\uffea\012\uffea\014\uffea\015\uffea\016\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\031\uffea" +
    "\036\uffea\052\uffea\057\uffea\060\uffea\061\uffea\062\uffea\063" +
    "\uffea\064\uffea\001\002\000\004\052\ufff6\001\002\000\016" +
    "\057\031\060\037\061\035\062\025\063\033\064\237\001" +
    "\002\000\004\050\241\001\002\000\004\050\240\001\002" +
    "\000\004\004\uffc8\001\002\000\004\004\uffc7\001\002\000" +
    "\004\004\251\001\002\000\046\004\250\025\uff8d\026\uff8d" +
    "\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\037" +
    "\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d" +
    "\046\uff8d\047\150\001\002\000\044\004\247\025\uff8e\026" +
    "\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e" +
    "\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045" +
    "\uff8e\046\uff8e\001\002\000\044\004\246\025\uff8c\026\uff8c" +
    "\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\037" +
    "\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c" +
    "\046\uff8c\001\002\000\004\052\uffaf\001\002\000\004\052" +
    "\uffb2\001\002\000\004\052\uffb0\001\002\000\004\052\uffb1" +
    "\001\002\000\020\036\074\057\031\060\037\061\132\062" +
    "\025\063\033\064\134\001\002\000\004\050\254\001\002" +
    "\000\004\051\255\001\002\000\060\003\072\005\066\010" +
    "\104\011\113\012\060\013\122\014\067\015\026\016\042" +
    "\017\043\020\024\021\034\022\073\023\070\024\062\031" +
    "\057\036\074\057\031\060\037\061\035\062\025\063\033" +
    "\064\106\001\002\000\004\052\257\001\002\000\064\003" +
    "\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf" +
    "\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\031\uffbf\036\uffbf\052\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\001\002\000" +
    "\006\006\215\007\216\001\002\000\064\003\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\031\uffbd\036\uffbd\052\uffbd\057\uffbd\060\uffbd\061" +
    "\uffbd\062\uffbd\063\uffbd\064\uffbd\001\002\000\064\003\uffbe" +
    "\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\031\uffbe\036\uffbe\052\uffbe\057\uffbe\060" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\001\002\000\060" +
    "\003\ufff0\005\ufff0\010\ufff0\011\ufff0\012\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0" +
    "\024\ufff0\031\ufff0\036\ufff0\052\ufff0\057\ufff0\060\ufff0\061" +
    "\ufff0\062\ufff0\063\ufff0\064\ufff0\001\002\000\006\004\uff9e" +
    "\050\uff9e\001\002\000\006\057\267\060\266\001\002\000" +
    "\004\050\271\001\002\000\004\050\270\001\002\000\004" +
    "\004\uffca\001\002\000\004\004\uffc9\001\002\000\060\003" +
    "\ufff2\005\ufff2\010\ufff2\011\ufff2\012\ufff2\014\ufff2\015\ufff2" +
    "\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\031\ufff2\036\ufff2\052\ufff2\057\ufff2\060\ufff2\061\ufff2" +
    "\062\ufff2\063\ufff2\064\ufff2\001\002\000\020\036\074\057" +
    "\031\060\037\061\275\062\025\063\033\064\134\001\002" +
    "\000\004\050\314\001\002\000\024\025\uff81\033\uff81\037" +
    "\uff81\040\uff81\043\uff81\044\uff81\045\uff81\046\uff81\050\310" +
    "\001\002\000\004\050\304\001\002\000\022\025\142\033" +
    "\144\037\301\040\300\043\141\044\136\045\145\046\137" +
    "\001\002\000\016\057\uff8f\060\uff8f\061\uff8f\062\uff8f\063" +
    "\uff8f\064\uff8f\001\002\000\016\057\uff90\060\uff90\061\uff90" +
    "\062\uff90\063\uff90\064\uff90\001\002\000\016\057\031\060" +
    "\037\061\035\062\025\063\033\064\134\001\002\000\006" +
    "\004\uff91\050\uff91\001\002\000\004\051\305\001\002\000" +
    "\060\003\072\005\066\010\104\011\113\012\060\013\122" +
    "\014\067\015\026\016\042\017\043\020\024\021\034\022" +
    "\073\023\070\024\062\031\057\036\074\057\031\060\037" +
    "\061\035\062\025\063\033\064\106\001\002\000\004\052" +
    "\307\001\002\000\060\003\uffb6\005\uffb6\010\uffb6\011\uffb6" +
    "\012\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021" +
    "\uffb6\022\uffb6\023\uffb6\024\uffb6\031\uffb6\036\uffb6\052\uffb6" +
    "\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\001" +
    "\002\000\004\051\311\001\002\000\060\003\072\005\066" +
    "\010\104\011\113\012\060\013\122\014\067\015\026\016" +
    "\042\017\043\020\024\021\034\022\073\023\070\024\062" +
    "\031\057\036\074\057\031\060\037\061\035\062\025\063" +
    "\033\064\106\001\002\000\004\052\313\001\002\000\060" +
    "\003\uffb5\005\uffb5\010\uffb5\011\uffb5\012\uffb5\014\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\024\uffb5\031\uffb5\036\uffb5\052\uffb5\057\uffb5\060\uffb5\061" +
    "\uffb5\062\uffb5\063\uffb5\064\uffb5\001\002\000\004\051\315" +
    "\001\002\000\060\003\072\005\066\010\104\011\113\012" +
    "\060\013\122\014\067\015\026\016\042\017\043\020\024" +
    "\021\034\022\073\023\070\024\062\031\057\036\074\057" +
    "\031\060\037\061\035\062\025\063\033\064\106\001\002" +
    "\000\004\052\317\001\002\000\060\003\uffb4\005\uffb4\010" +
    "\uffb4\011\uffb4\012\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4" +
    "\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\031\uffb4\036" +
    "\uffb4\052\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4" +
    "\064\uffb4\001\002\000\004\004\uff9b\001\002\000\014\002" +
    "\uffd4\003\uffd4\015\uffd4\017\uffd4\020\uffd4\001\002\000\016" +
    "\057\uff94\060\uff94\061\uff94\062\uff94\063\uff94\064\uff94\001" +
    "\002\000\016\057\uff97\060\uff97\061\uff97\062\uff97\063\uff97" +
    "\064\uff97\001\002\000\004\004\uff9c\001\002\000\016\057" +
    "\uff95\060\uff95\061\uff95\062\uff95\063\uff95\064\uff95\001\002" +
    "\000\004\004\uff9a\001\002\000\016\057\uff92\060\uff92\061" +
    "\uff92\062\uff92\063\uff92\064\uff92\001\002\000\004\004\uff99" +
    "\001\002\000\016\057\uff96\060\uff96\061\uff96\062\uff96\063" +
    "\uff96\064\uff96\001\002\000\016\057\031\060\037\061\035" +
    "\062\025\063\033\064\134\001\002\000\016\057\uff93\060" +
    "\uff93\061\uff93\062\uff93\063\uff93\064\uff93\001\002\000\004" +
    "\004\uff98\001\002\000\006\057\336\062\337\001\002\000" +
    "\004\004\uffde\001\002\000\004\004\uffdd\001\002\000\004" +
    "\051\341\001\002\000\056\003\072\005\066\010\104\011" +
    "\113\012\060\014\067\015\026\016\042\017\043\020\024" +
    "\021\034\022\073\023\070\024\062\031\057\036\074\057" +
    "\031\060\037\061\035\062\025\063\033\064\106\001\002" +
    "\000\004\052\343\001\002\000\014\002\uffd5\003\uffd5\015" +
    "\uffd5\017\uffd5\020\uffd5\001\002\000\014\015\026\016\042" +
    "\017\043\020\024\021\034\001\002\000\004\050\uffcb\001" +
    "\002\000\004\051\347\001\002\000\056\003\072\005\066" +
    "\010\104\011\113\012\060\014\067\015\026\016\042\017" +
    "\043\020\024\021\034\022\073\023\070\024\062\031\057" +
    "\036\074\057\031\060\037\061\035\062\025\063\033\064" +
    "\106\001\002\000\004\052\351\001\002\000\014\002\uffd3" +
    "\003\uffd3\015\uffd3\017\uffd3\020\uffd3\001\002\000\012\004" +
    "\uffe9\027\uffe9\050\uffe9\053\uffe9\001\002\000\056\003\072" +
    "\005\066\010\104\011\113\012\060\014\067\015\026\016" +
    "\042\017\043\020\024\021\034\022\073\023\070\024\062" +
    "\031\057\036\074\057\031\060\037\061\035\062\025\063" +
    "\033\064\106\001\002\000\004\052\355\001\002\000\014" +
    "\002\uffd6\003\uffd6\015\uffd6\017\uffd6\020\uffd6\001\002\000" +
    "\004\050\357\001\002\000\004\051\360\001\002\000\056" +
    "\003\072\005\066\010\104\011\113\012\060\014\067\015" +
    "\026\016\042\017\043\020\024\021\034\022\073\023\070" +
    "\024\062\031\057\036\074\057\031\060\037\061\035\062" +
    "\025\063\033\064\106\001\002\000\004\052\362\001\002" +
    "\000\012\003\ufffb\015\ufffb\017\ufffb\020\ufffb\001\002\000" +
    "\004\002\001\001\002\000\014\002\ufffe\003\017\015\006" +
    "\017\014\020\005\001\002\000\004\047\uffd1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\014\002\010\003\007\004\003\015\011\061" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\017\012\363\015" +
    "\015\061\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\014\015\011\061\006\001\001\000\002\001" +
    "\001\000\012\010\017\012\020\015\015\061\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\021\015\015\061\006\001\001\000\002\001\001" +
    "\000\012\014\031\017\035\052\040\060\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\074\005\055\006\110\011\076\016\106\017" +
    "\107\020\101\021\060\022\111\023\104\024\070\025\100" +
    "\026\075\027\063\030\077\031\054\032\102\035\074\036" +
    "\052\037\113\040\045\041\050\042\051\043\047\044\062" +
    "\052\053\054\046\056\114\057\064\060\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\045\331\046\137\047" +
    "\323\050\142\051\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\126\036\317\052" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\126\036\263\052\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\011\244\035\241\036\052\037\113\040\045\041\050\042" +
    "\051\043\047\044\062\052\243\001\001\000\002\001\001" +
    "\000\074\005\233\006\110\011\076\016\106\017\107\020" +
    "\101\021\060\022\111\023\104\024\070\025\100\026\075" +
    "\027\063\030\077\031\054\032\102\035\074\036\052\037" +
    "\113\040\045\041\050\042\051\043\047\044\062\052\053" +
    "\054\046\056\114\057\064\060\027\001\001\000\004\063" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\074\005\171\006\110\011\076\016\106\017\107\020\101" +
    "\021\060\022\111\023\104\024\070\025\100\026\075\027" +
    "\063\030\077\031\054\032\102\035\074\036\052\037\113" +
    "\040\045\041\050\042\051\043\047\044\062\052\053\054" +
    "\046\056\114\057\064\060\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\100" +
    "\005\117\006\110\007\122\011\076\016\106\017\107\020" +
    "\101\021\060\022\111\023\104\024\070\025\100\026\075" +
    "\027\063\030\077\031\054\032\102\034\120\035\074\036" +
    "\052\037\113\040\045\041\050\042\051\043\047\044\062" +
    "\052\053\054\046\056\114\057\064\060\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\011" +
    "\126\033\132\036\134\041\127\042\130\044\062\052\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\046\137\050\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\126\036\146\052\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\126\036" +
    "\145\052\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\150\013" +
    "\152\052\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\150\013\156\052\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\011\170\035\165\036\052\037\113" +
    "\040\045\041\050\042\051\043\047\044\062\052\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\011\203\035\200\036\052\037\113\040\045\041\050" +
    "\042\051\043\047\044\062\052\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\011\126\033\206\036\134\041\127\042\130\044\062\052" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\100" +
    "\005\117\006\110\007\211\011\076\016\106\017\107\020" +
    "\101\021\060\022\111\023\104\024\070\025\100\026\075" +
    "\027\063\030\077\031\054\032\102\034\120\035\074\036" +
    "\052\037\113\040\045\041\050\042\051\043\047\044\062" +
    "\052\053\054\046\056\114\057\064\060\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\011\126\033\217\036" +
    "\134\041\127\042\130\044\062\052\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\100\005\117\006\110\007" +
    "\222\011\076\016\106\017\107\020\101\021\060\022\111" +
    "\023\104\024\070\025\100\026\075\027\063\030\077\031" +
    "\054\032\102\034\120\035\074\036\052\037\113\040\045" +
    "\041\050\042\051\043\047\044\062\052\053\054\046\056" +
    "\114\057\064\060\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\100\005\117\006\110\007\225\011\076\016" +
    "\106\017\107\020\101\021\060\022\111\023\104\024\070" +
    "\025\100\026\075\027\063\030\077\031\054\032\102\034" +
    "\120\035\074\036\052\037\113\040\045\041\050\042\051" +
    "\043\047\044\062\052\053\054\046\056\114\057\064\060" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\235\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\011\126\033\252" +
    "\036\134\041\127\042\130\044\062\052\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\100\005\117\006\110" +
    "\007\255\011\076\016\106\017\107\020\101\021\060\022" +
    "\111\023\104\024\070\025\100\026\075\027\063\030\077" +
    "\031\054\032\102\034\120\035\074\036\052\037\113\040" +
    "\045\041\050\042\051\043\047\044\062\052\053\054\046" +
    "\056\114\057\064\060\027\001\001\000\002\001\001\000" +
    "\010\025\257\026\261\027\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\011\126\033\275\036\276\041\127\042\130" +
    "\043\273\044\062\052\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\046\137\050\142" +
    "\051\301\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\126\036\302\052\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\100\005\117\006\110\007\305\011" +
    "\076\016\106\017\107\020\101\021\060\022\111\023\104" +
    "\024\070\025\100\026\075\027\063\030\077\031\054\032" +
    "\102\034\120\035\074\036\052\037\113\040\045\041\050" +
    "\042\051\043\047\044\062\052\053\054\046\056\114\057" +
    "\064\060\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\100\005\117\006\110\007\311\011" +
    "\076\016\106\017\107\020\101\021\060\022\111\023\104" +
    "\024\070\025\100\026\075\027\063\030\077\031\054\032" +
    "\102\034\120\035\074\036\052\037\113\040\045\041\050" +
    "\042\051\043\047\044\062\052\053\054\046\056\114\057" +
    "\064\060\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\100\005\117\006\110\007\315\011" +
    "\076\016\106\017\107\020\101\021\060\022\111\023\104" +
    "\024\070\025\100\026\075\027\063\030\077\031\054\032" +
    "\102\034\120\035\074\036\052\037\113\040\045\041\050" +
    "\042\051\043\047\044\062\052\053\054\046\056\114\057" +
    "\064\060\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\126\036\333\052\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\074\005\341" +
    "\006\110\011\076\016\106\017\107\020\101\021\060\022" +
    "\111\023\104\024\070\025\100\026\075\027\063\030\077" +
    "\031\054\032\102\035\074\036\052\037\113\040\045\041" +
    "\050\042\051\043\047\044\062\052\053\054\046\056\114" +
    "\057\064\060\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\344\017\035\060\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\074\005\347\006\110\011" +
    "\076\016\106\017\107\020\101\021\060\022\111\023\104" +
    "\024\070\025\100\026\075\027\063\030\077\031\054\032" +
    "\102\035\074\036\052\037\113\040\045\041\050\042\051" +
    "\043\047\044\062\052\053\054\046\056\114\057\064\060" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\074\005\353\006\110\011\076\016\106\017" +
    "\107\020\101\021\060\022\111\023\104\024\070\025\100" +
    "\026\075\027\063\030\077\031\054\032\102\035\074\036" +
    "\052\037\113\040\045\041\050\042\051\043\047\044\062" +
    "\052\053\054\046\056\114\057\064\060\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\074\005\360\006\110\011\076\016\106\017" +
    "\107\020\101\021\060\022\111\023\104\024\070\025\100" +
    "\026\075\027\063\030\077\031\054\032\102\035\074\036" +
    "\052\037\113\040\045\041\050\042\051\043\047\044\062" +
    "\052\053\054\046\056\114\057\064\060\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\021\015\015\061\006\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 action_obj.scanner = scanner;
    }

 
    public LexerAS scanner;
    public parser(LexerAS scanner) {
        super(scanner);
        this.scanner = scanner;
    }

    public void report_error(String message, Object info) {
        String m = "Error sintactico ";
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m+="en la linea "+(s.left+1)+" -> ";
            }
            m+="["+message+"]";
            System.err.println(m);
        }
        else {
            System.err.println("Error [SINTAXIS DESCONOCIDA]");
        }
        
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        
    }
  
 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    LexerAS scanner;
    
    
    HashMap<String, HashMap<String, String>> listaTablasSimbolos = new HashMap<String, HashMap<String, String>>();
    String tablaActual;
    VerificadorTipos verificador = new VerificadorTipos();
    
    public void imprimirTabla() {
        /*System.out.println("[IMPRIMIENDO TABLA DE SIMBOLOS]\n");
        for (String key: listaTablasSimbolos.keySet()) {
            System.out.println("Tabla de simbolos Funcion:"+ key);
            System.out.println("Valores del bloque de funcion ");
            for (String item : listaTablasSimbolos.get(key)) {
                System.out.println(item);
            }
            System.out.println("");
        }*/
        System.out.println("[#----------------------Impresion de Tabla de Simbolos----------------------#]\n");
        
        for (String i : listaTablasSimbolos.keySet()) {
            System.out.println(i);
            HashMap<String, String> temp = listaTablasSimbolos.get(i);
            for (String j:temp.keySet()) {
                System.out.println("\t\t| Nombre simbolo:"+j+"\t Tipo simbolo:"+temp.get(j));
            }
        }
        System.out.println("\n[#----------------------Fin Tabla de Simbolos----------------------#]");
    }
    
    public boolean existeVar(String valor, HashMap<String, String> tablaValores) {
        for (String i: tablaValores.keySet()) {
            if (i.equals(valor)) return true;
        }
        return false;
    }
        
    





  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Object RESULT =null;
		imprimirTabla();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= COMENTARIO main funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= main funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funciones ::= funciones crearFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funciones ::= crearFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main ::= tipoIDFun PARENTESISABRE PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bloqueCod ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bloqueCod ::= estructControl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloqueCod ::= return 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bloqueCod ::= sentencia bloqueCod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bloqueCod ::= estructControl bloqueCod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bloqueCod ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= crearVariable FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= crearAsignarVariable FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= asignarVariable FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= asignarElementoArreglo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= obtenerDatoArreglo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= expresion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= funcion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= entradaEst FIN_EXPRESION 
            {
              Object RESULT =null;
		int vETleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vETright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vET = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= salidaEst FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$0 ::= 
            {
              Object RESULT =null;
 System.err.println("Error sintactico en la linea "+scanner.getYYLine()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= error NT$0 FIN_EXPRESION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // crearVariable ::= tipoVariable Identificador 
            {
              Object RESULT =null;
		int vTVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vTVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vTV = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String tipo = vTV.toString();
                        String ID = vID.toString();
                        //System.out.println("[PARSER] Funcion TIPO: "+vTV+" ID: "+vID);
                        if (existeVar(ID, listaTablasSimbolos.get(tablaActual))) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [REPETICION DE VARIABLE] -> "+ID);
                        listaTablasSimbolos.get(tablaActual).put(ID, tipo);
                        RESULT = vID;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearVariable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // crearAsignarVariable ::= crearVariable EQ literal 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String tipo = listaTablasSimbolos.get(tablaActual).get(vID).toString();
    String valor = vL.toString();
    
    if (!verificador.opciones(tipo, valor, vL)) {System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE VARIABLE INVALIDA]");}
    
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // crearAsignarVariable ::= crearVariable EQ expresion 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // crearAsignarVariable ::= crearVariable EQ Identificador 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vI = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String tipo = listaTablasSimbolos.get(tablaActual).get(vID).toString();
    String valor = vI.toString();
    if (!(listaTablasSimbolos.get(tablaActual).get(valor)).equals(tipo)) {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE VARIABLE INVALIDA]");
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // crearAsignarVariable ::= crearVariable EQ funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // crearAsignarVariable ::= crearVariable FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // asignarVariable ::= Identificador EQ literal 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (!existeVar(vID.toString(), listaTablasSimbolos.get(tablaActual))) {
       System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");
    }
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignarVariable ::= Identificador EQ expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // asignarVariable ::= Identificador EQ Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // asignarVariable ::= Identificador EQ funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arreglo ::= LLAVESCUADABRE LLAVESCUADCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignarElementoArreglo ::= elementoArreglo EQ L_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarElementoArreglo",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asignarElementoArreglo ::= elementoArreglo EQ L_CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarElementoArreglo",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // elementoArreglo ::= Identificador LLAVESCUADABRE L_ENTERO LLAVESCUADCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementoArreglo",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // elementoArreglo ::= Identificador LLAVESCUADABRE Identificador LLAVESCUADCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementoArreglo",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // obtenerDatoArreglo ::= Identificador LLAVESCUADABRE L_ENTERO LLAVESCUADCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("obtenerDatoArreglo",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // obtenerDatoArreglo ::= Identificador LLAVESCUADABRE Identificador LLAVESCUADCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("obtenerDatoArreglo",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funcion ::= Identificador PARENTESISABRE PARENTESISCIERRA 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funcion ::= Identificador PARENTESISABRE parametro PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // crearFuncion ::= tipoIDFun PARENTESISABRE PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // crearFuncion ::= tipoIDFun PARENTESISABRE Identificador PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // crearFuncion ::= tipoIDFun PARENTESISABRE literal PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // crearFuncion ::= tipoIDFun PARENTESISABRE crearParametro PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // crearFuncion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipoIDFun ::= tipoFuncion Identificador 
            {
              Object RESULT =null;
		int vTFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vTFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vTF = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    //String tipoTabla = "";
   // if (vID.toString().equals("main")) tipoTabla = "Funcion [main], tipo:"+vTF.toString();
   // else {tipoTabla = "Funcion ["+vID+"], tipo :"+vTF.toString();}
    //ArrayList<String> funciones = new ArrayList<String>();   
    //System.out.println(nombreFun);
    //funciones.add(tipoTabla);


    tablaActual = "Tabla:"+vID.toString(); 
    HashMap<String, String> datosFuncion = new HashMap<String, String>();
    datosFuncion.put(tablaActual, vTF.toString());

    //System.out.println(listaTablasSimbolos);
    listaTablasSimbolos.put(tablaActual, datosFuncion);
    
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoIDFun",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametro ::= Identificador 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (!existeVar(vID.toString(), listaTablasSimbolos.get(tablaActual))) System.err.println("Error semantico en la linea "+scanner.getYYLine()+", no existe la variable -> "+vID.toString());
RESULT = vID; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametro ::= literal 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametro ::= funcion 
            {
              Object RESULT =null;
		int vFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vF = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vF; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametro ::= Identificador COMA parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // crearParametro ::= crearVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearParametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // crearParametro ::= crearVariable COMA crearParametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearParametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // entradaEst ::= SYS_READ PARENTESISABRE L_ENTERO PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entradaEst",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // entradaEst ::= SYS_READ PARENTESISABRE L_FLOTANTE PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entradaEst",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // salidaEst ::= SYS_PRINT PARENTESISABRE Identificador PARENTESISCIERRA 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salidaEst",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // salidaEst ::= SYS_PRINT PARENTESISABRE literal PARENTESISCIERRA 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salidaEst",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // estructControl ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // estructControl ::= elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // estructControl ::= else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // estructControl ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // estructControl ::= do 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // estructControl ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // estructControl ::= error 
            {
              Object RESULT =null;
		 
System.err.println("Error sintactico en la linea "+scanner.getYYLine());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // if ::= IF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // if ::= IF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // if ::= IF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // elif ::= if ELIF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // else ::= if ELSE LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // while ::= WHILE PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // do ::= DO LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA WHILE PARENTESISABRE condicion PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bloqueControl ::= bloqueCod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueControl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bloqueControl ::= break 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueControl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // for ::= FOR PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // for ::= FOR PARENTESISABRE L_BOOLEANO PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // for ::= FOR PARENTESISABRE expresionConjuntiva PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // break ::= BREAK FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // return ::= RETURN literal FIN_EXPRESION 
            {
              Object RESULT =null;
		int iDLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iDLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object iDL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // return ::= RETURN expresion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // return ::= RETURN Identificador FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // return ::= RETURN funcion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // condicion ::= L_BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // condicion ::= expresionRelacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // condicion ::= expresionNegacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= expresionBinaria 
            {
              Object RESULT =null;
		int vResleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vResright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vRes = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= expresionUnaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= expresionRelacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= expresionNegacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= expresionConjuntiva 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresionRelacion ::= operando operadorRelacional operando 
            {
              Object RESULT =null;
		int vOPLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vOPLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vOPL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vORleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vORright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vOPRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vOPRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vOPR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String op1 = vOPL.toString();
    String op2 = vOPR.toString();
    if(verificador.verificarString(vOPL)) {
        if (existeVar(op1, listaTablasSimbolos.get(tablaActual))) {
            String tipo = listaTablasSimbolos.get(tablaActual).get(op1);
            if ((!tipo.equals("int") && !tipo.equals("float"))) {
                System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");
            }
            
        }
        else {System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");}
    } 
    else if (verificador.verificarString(vOPR)) {
        if (existeVar(op2, listaTablasSimbolos.get(tablaActual))) {
            String tipo = listaTablasSimbolos.get(tablaActual).get(op2);
            if ((!tipo.equals("int") && !tipo.equals("float"))) {
                System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");
            }
        
        }
        else{System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");}
    }
    else {
        if(!verificador.verificarEntero(vOPL.toString()) || !verificador.verificarBooleano(vOPL.toString()) && !verificador.verificarEntero(vOPR.toString()) || !verificador.verificarBooleano(vOPR.toString())) {
            System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");
        }
    }
    RESULT = "true"; //revisar

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresionRelacion ::= operando operadorComparacion operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operadorRelacional ::= GREATER_THAN 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operadorRelacional ::= LESS_THAN 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operadorRelacional ::= GREATER_THAN_OR_EQ 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operadorRelacional ::= LESS_THAN_OR_EQ 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operadorComparacion ::= EQEQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorComparacion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operadorComparacion ::= NOT_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorComparacion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresionNegacion ::= operadorNegacion operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionNegacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operadorNegacion ::= NEGACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorNegacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresionUnaria ::= operando operadorUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnaria",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresionUnaria ::= MINUS operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnaria",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operadorUnario ::= MINUSMINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operadorUnario ::= PLUSPLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresionBinaria ::= operando operadorBinario operando 
            {
              Object RESULT =null;
		int vOPLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vOPLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vOPL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vOBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vOBright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOB = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vOPRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vOPRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vOPR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String op1 = vOPL.toString();
    String op2 = vOPR.toString();
    String op3 = vOB.toString();
 
    if (verificador.verificarString(vOPL) && verificador.verificarString(vOPR)) {
   
        String tipo1 = listaTablasSimbolos.get(tablaActual).get(op1);
        String tipo2 = listaTablasSimbolos.get(tablaActual).get(op2);

        if (!tipo1.equals(tipo2)) {
            System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [OPERACION ILEGAL]");
        }
    }
    else if (verificador.verificarString(vOPL)) {
        String tipo="";
        if (!verificador.verificarString(vOPR)) {
            if (verificador.verificarEntero(op2)) tipo = "int";
            if (verificador.verificarFloat(vOPR)) tipo = "float";
            if(!(listaTablasSimbolos.get(tablaActual).get(op1)).equals(tipo)) {
                     
                System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [OPERACION ILEGAL]");
            }
        }

        
        else if (verificador.verificarString(vOPR)) {
            
            if (!verificador.verificarString(vOPL)) {
                if (verificador.verificarEntero(op2)) tipo = "int";
                if (verificador.verificarFloat(vOPL)) tipo = "float";
                if(!(listaTablasSimbolos.get(tablaActual).get(op1)).equals(tipo)) {
                    System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [OPERACION ILEGAL]");
                }
            }

        }
    }
    

    else if (verificador.verificarEntero(op1) && verificador.verificarEntero(op2)) {

        int e1 = Integer.parseInt(op1);

        int e2 = Integer.parseInt(op2);
        switch(op3) {
            case "+":
                RESULT = e1+e2;
                break;

            case "-":   
                RESULT = e1-e2;
            case "*":
                RESULT = e1*e2;
            case "/":
                if (e2 != 0) {
                    RESULT = e1/e2;
                }
                else {
                    System.err.println("Error semantico en la linea "+scanner.getYYLine()+ " [OPERACION ILEGAL]");
                    RESULT = "0";
                }
                
            case "**":
                RESULT = e1+e2;
            case "~":
                RESULT = e1%e2;
            default:
                break;
        }
    }

    else {
        if (verificador.verificarFloat(vOPL) && verificador.verificarFloat(vOPR)) {

            float e1 =  Float.parseFloat(op1);
            float e2 =  Float.parseFloat(op2);
            switch(op3) {
                case "+":
                    RESULT = e1+e2;
                case "-":
                    RESULT = e1-e2;
                case "*":
                    RESULT = e1*e2;
                case "/":
                    if (e2 != 0) {
                        RESULT = e1/e2;
                    }
                    else {
                        System.err.println("Error semantico en la linea "+scanner.getYYLine()+ " [OPERACION ILEGAL]");
                        RESULT = "0";
                    }
                case "**":
                    RESULT = e1+e2;
                case "~":
                    RESULT = e1%e2;
                default:
                    break;
            }
    
        }
        else {
            System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [OPERACION ILEGAL]");
        }
    }
        
    //*/

    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operadorBinario ::= PLUS 
            {
              Object RESULT =null;
		 RESULT = "+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operadorBinario ::= MINUS 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operadorBinario ::= DIVI 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operadorBinario ::= TIMES 
            {
              Object RESULT =null;
		 RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operadorBinario ::= POWER 
            {
              Object RESULT =null;
		 RESULT = "**"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operadorBinario ::= MODULO 
            {
              Object RESULT =null;
		 RESULT = "~"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresionConjuntiva ::= operando operadorConjuntiva operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionConjuntiva",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operadorConjuntiva ::= CONJUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorConjuntiva",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operadorConjuntiva ::= DISYUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorConjuntiva",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operando ::= literal 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operando ::= Identificador 
            {
              Object RESULT =null;
		int vIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vI = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vI; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operando ::= funcion 
            {
              Object RESULT =null;
		int vResleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vResright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vRes = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vRes; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // tipoFuncion ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // tipoFuncion ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = "bool"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // tipoFuncion ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // tipoVariable ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // tipoVariable ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = "bool"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // tipoVariable ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // tipoVariable ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // tipoVariable ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "string"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // literal ::= L_ENTERO 
            {
              Object RESULT =null;
		int l_Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number l_E = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_E; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // literal ::= L_FLOTANTE 
            {
              Object RESULT =null;
		int l_Fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number l_F = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_F; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // literal ::= L_BOOLEANO 
            {
              Object RESULT =null;
		int l_Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Boolean l_B = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_B; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // literal ::= L_CHAR 
            {
              Object RESULT =null;
		int l_Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Character l_C = (java.lang.Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_C; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int l_Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String l_S = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_S; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
